[{"name": "Cryptography", "icon": "las la-shield-alt", "activities": [{"function_call": "generate_random_key()", "name": "Random key", "description": "Generate random Fernet key. Fernet guarantees that a message encrypted using it cannot be manipulated or read without the key. Fernet is an implementation of symmetric (also known as \u201csecret key\u201d) authenticated cryptography", "parameters": [], "return": " Random key\n", "example": ">>> # Generate a random key\n>>> generate_random_key()\nb'AYv6ZPVgnrUtHDbGZqAopRyAo9r0_UKrA2Rm3K_NjIo='\n", "snippet": "# Generate a random key\ngenerate_random_key()\n", "keywords": ["random", "key", "fernet", "hash", "security", "cryptography", "password", "secure"], "icon": "las la-key"}, {"function_call": "encrypt_text_with_key(text, key)", "name": "Encrypt text", "description": "Encrypt text with (Fernet) key,", "parameters": [{"name": " text", "description": " Text to be encrypted\n"}, {"name": " key", "description": " Fernet Encryption key\n"}], "return": " Encrypted text\n", "example": ">>> # Generate a random key\n>>> key = generate_random_key()\n>>> # Encrypt text with this key\n>>> encrypt_text_with_key('Sample text', key)\nb'gAAAAABd8lpG8fNqcj5eXrPPHlx4KeCm-1TgX3jkyhStMfIlgGImIa-qaINZAj8XcxPcG8iu84iT56b_qAW9c5qpe7btUFhtxQ=='\n", "snippet": "# Generate a random key\nkey = generate_random_key()\n# Encrypt text with this key\nencrypt_text_with_key('Sample text', key)\n", "keywords": ["random", "encryption", "secure", "security", "hash", "password", "fernet", "text"], "icon": "las la-lock"}, {"function_call": "decrypt_text_with_key(encrypted_text, key)", "name": "Decrypt text", "description": "Dexrypt bytes-like object to string with (Fernet) key", "parameters": [{"name": " encrypted_text", "description": " Text to be encrypted.\n"}, {"name": " key", "description": " Fernet Encryption key\n"}], "return": " Decrypted text\n", "example": ">>> # Generate a random key\n>>> key = generate_random_key()\n>>> # Encrypt text with generated key\n>>> encrypted_text = encrypt_text_with_key('Sample text', key)\n>>> # Decrypt text with same key\n>>> decrypt_text_with_key(encrypted_text, key)\n'Sample text'\n", "snippet": "# Generate a random key\nkey = generate_random_key()\n# Encrypt text with generated key\nencrypted_text = encrypt_text_with_key('Sample text', key)\n# Decrypt text with same key\ndecrypt_text_with_key(encrypted_text, key)\n", "keywords": ["decrypt", "random", "unlock", "un-lock hash", "security", "cryptography", "password", "secure", "hash", "text"], "icon": "las la-lock-open"}, {"function_call": "encrypt_file_with_key(input_path, key, output_path=None)", "name": "Encrypt file", "description": "Encrypt file with (Fernet) key. Note that file will be unusable unless unlocked with the same key.", "parameters": [{"name": " inputh_path", "description": " Path to file to be encrypted\n"}, {"name": " key", "description": " Fernet Encryption key\n"}, {"name": " output_path", "description": " Output path, defaults to the same directory with \"_encrypted\" added to the name\n"}], "return": " Path to encrypted file\n", "example": ">>> # Generate a random key\n>>> key = generate_random_key()\n>>> # Create a text file to illustrate file encryption\n>>> text_file_path = make_text_file()\n>>> # Encrypt the text file\n>>> encrypt_file_with_key(text_file_path, key=key)\n'C:\\\\Users\\\\<username>\\\\generated_text_file_encrypted.txt'\n", "snippet": "# Generate a random key\nkey = generate_random_key()\n# Create a text file to illustrate file encryption\ntext_file_path = make_text_file()\n# Encrypt the text file\nencrypt_file_with_key(text_file_path, key=key)\n", "keywords": ["encrypt", "random", "password", "secure", "secure file", "lock"], "icon": "las la-lock"}, {"function_call": "decrypt_file_with_key(input_path, key, output_path=None)", "name": "Decrypt file", "description": "Decrypts file with (Fernet) key", "parameters": [{"name": " input_file", "description": " Bytes-like file to be decrypted.\n"}, {"name": " key", "description": " Path where key is stored.\n"}, {"name": " output_file", "description": " Outputfile, make sure to give this the same extension as basefile before encryption. Default is the same directory with \"_decrypted\" added to the name \n"}], "return": " Path to decrypted file\n", "example": ">>> # Generate a random key\n>>> key = generate_random_key()\n>>> # Create a text file to encrypt file\n>>> text_file_path = make_text_file()\n>>> # Encrypt the text file\n>>> encrypted_text_file = encrypt_file_with_key(text_file_path, key=key)\n>>> # Decrypt the newly encrypted file\n>>> decrypt_file_with_key(encrypted_text_file, key=key)\n'C:\\\\Users\\\\<username>\\\\generated_text_file_encrypted_decrypted.txt'\n", "snippet": "# Generate a random key\nkey = generate_random_key()\n# Create a text file to encrypt file\ntext_file_path = make_text_file()\n# Encrypt the text file\nencrypted_text_file = encrypt_file_with_key(text_file_path, key=key)\n# Decrypt the newly encrypted file\ndecrypt_file_with_key(encrypted_text_file, key=key)\n", "keywords": ["decrypt", "random", "password", "secure", "secure file", "unlock"], "icon": "las la-lock-open"}, {"function_call": "generate_key_from_password(password, salt=None)", "name": "Key from password", "description": "Generate key based on password and salt. If both password and salt are known the key can be regenerated.", "parameters": [{"name": " password", "description": " Passwords\n"}, {"name": " salt", "description": " Salt to generate key in combination with password. Default value is the hostname. Take in to account that hostname is necessary to generate key, e.g. when files are encrypted with salt 'A' and password 'B', both elements are necessary to decrypt files.\n"}], "return": " Bytes-like object\n", "example": ">>> # Generate a key from password\n>>> key = generate_key_from_password(password='Sample password')\nb'7jGGF5w_xyI0CIZGCmLlnNyUvFpNvIUY08JCHopgAmm8='\n", "snippet": "# Generate a key from password\nkey = generate_key_from_password(password='Sample password')\n", "keywords": ["random", "key", "fernet", "hash", "security", "cryptography", "password", "secure", "salt"], "icon": "las la-lock"}, {"function_call": "generate_hash_from_file(input_path, method=\"md5\", buffer_size=65536)", "name": "Hash from file", "description": "Generate hash from file", "parameters": [{"name": " input_path", "description": " File to hash\n"}, {"name": " method", "description": " Method for hashing, choose between 'md5', 'sha256' and 'blake2b'. Note that different methods generate different hashes. Default method is 'md5'.\n"}, {"name": " buffer_size", "description": " Buffer size for reading file in chunks, default value is 64kb\n"}], "return": " Bytes-like object\n", "example": ">>> # Generate a text file to illustrate hash\n>>> text_file_path = make_text_file()\n>>> # Get hash from text file\n>>> generate_hash_from_file(text_file_path)\n'1ba249ca5931f3c85fe44d354c2f274d'\n", "snippet": "# Generate a text file to illustrate hash\ntext_file_path = make_text_file()\n# Get hash from text file\ngenerate_hash_from_file(text_file_path)\n", "keywords": ["hash", "mdf5", "sha256", "blake2b", "identifier", "unique", "hashing", "fingerprint", "comparison"], "icon": "las la-fingerprint"}, {"function_call": "generate_hash_from_text(text, method=\"md5\")", "name": "Hash from text", "description": "Generate hash from text. Keep in mind that MD5 is not cryptographically secure.", "parameters": [{"name": " text", "description": " Text to hash\n"}, {"name": " method", "description": " Method for hashing, choose between 'md5', 'sha256' and 'blake2b'. Note that different methods generate different hashes. Default method is 'md5'.\n"}], "return": "", "example": ">>> # Generate a hast from text\n>>> generate_hash_from_text('Sample text')\n'1ba249ca5931f3c85fe44d354c2f274d'\n", "snippet": "# Generate a hast from text\ngenerate_hash_from_text('Sample text')\n", "keywords": ["Hash", "mdf5", "sha256", "blake2b", "identifier", "unique", "hashing", "fingerprint", "text", "comparison"], "icon": "las la-fingerprint"}]}, {"name": "Random", "icon": "las la-dice-d6", "activities": [{"function_call": "generate_random_number(lower_limit=0, upper_limit=100, fractional=False)", "name": "Random number", "description": "Random numbers can be integers (not a fractional number) or a float (fractional number).", "parameters": [{"name": " lower_limit", "description": " Lower limit for random number\n"}, {"name": " upper_limit", "description": " Upper limit for random number\n"}, {"name": " fractional", "description": " Setting this to True will generate fractional number. Default value is False and only generates whole numbers.\n"}], "return": " Random integer or float\n", "example": ">>> # Generate a random number\n>>> generate_random_number()\n7\n", "snippet": "# Generate a random number\ngenerate_random_number()\n", "keywords": ["random number", "random integer", "dice", "gamble", "rng", "random"], "icon": "las la-dice"}, {"function_call": "generate_random_data(locale=None, type=None)", "name": "Random data", "description": "Generates all kinds of random data. Specifying locale changes format for some options", "parameters": [{"name": " attribute", "description": " Choose a specific characteristic or attribute from fake person\n"}, {"name": " locale", "description": " Add a locale to generates typical data for selected locale.\n"}], "return": " Random data as string\n", "example": ">>> # Generate random data\n>>> generate_random_data()\n'Banana'\n", "snippet": "# Generate random data\ngenerate_random_data()\n", "keywords": ["random", "lorem ipsum", "gsm", "cell", "cellphone", "telephone", "mobile", "number", "smartphone", "text generater", "filler", "place holder", "noise", "random text", "random txt", "text generation", "fake", "code", "email", "generate", "generator", "generic"], "icon": "las la-digital-tachograph"}, {"function_call": "generate_random_boolean()", "name": "Random boolean", "description": "Generates a random boolean (True or False)", "parameters": [], "return": " Boolean\n", "example": ">>> # Generate a random boolean\n>>> generate_random_boolean()\nTrue\n", "snippet": "# Generate a random boolean\ngenerate_random_boolean()\n", "keywords": ["random", "dice", "gamble", "rng", "coin", "coinflip", "heads", "tails"], "icon": "las la-coins"}, {"function_call": "generate_random_name(locale=None, name=None)", "name": "Random name", "description": "Generates a random name. Adding a locale adds a more common name in the specified locale. Provides first name and last name.", "parameters": [{"name": " locale", "description": " Add a locale to generate popular name for selected locale.\n"}, {"name": " name", "description": " Choose to generate first, last or full name.\n"}], "return": " Random name as string\n", "example": ">>> # Generate a random name\n>>> generate_random_name()\n'Michelle Murphy'\n", "snippet": "# Generate a random name\ngenerate_random_name()\n", "keywords": ["random", "dummy name", "name", "name generater", "fake person", "fake", "person", "surname", "lastname", "fake name generator"], "icon": "las la-user-tag"}, {"function_call": "generate_random_words(locale=None, type=None)", "name": "Random words", "description": "Generates a random sentence. Specifying locale changes language and content based on locale.", "parameters": [{"name": " type", "description": " Specify type of words to generate\n"}, {"name": " locale", "description": " Add a locale to generate text for selected locale.\n"}], "return": " Random words as string\n", "example": ">>> # Generate a random sentence\n>>> generate_random_words()\n'The age of automation is going to be the age of do-it-yourself'\n", "snippet": "# Generate a random sentence\ngenerate_random_words()\n", "keywords": ["random", "sentence", "lorem ipsum", "text generater", "filler", "place holder", "noise", "random text", "random txt", "text generation", "nlp"], "icon": "las la-comment"}, {"function_call": "generate_random_address(locale=None, format=None)", "name": "Random address", "description": "Generates a random address. Specifying locale changes random locations and streetnames based on locale.", "parameters": [{"name": " format", "description": " Choose a specific part or format for the address\n"}, {"name": " locale", "description": " Add a locale to generate typical address for selected locale.\n"}], "return": " Name as string\n", "example": ">>> # Generate a random address\n>>> generate_random_address()\n'123 Robot Avenue'\n", "snippet": "# Generate a random address\ngenerate_random_address()\n", "keywords": ["random", "address", "data", "street", "city", "postal", "dummy name", "name", "name generater", "fake person", "fake", "person", "surname", "lastname", "fake name generator"], "icon": "las la-map-marker"}, {"function_call": "generate_random_beep(max_duration=2000, max_frequency=5000)", "name": "Random beep", "description": "Generates a random beep, only works on Windows", "parameters": [{"name": " max_duration", "description": " Maximum random duration in miliseconds. Default value is 2 miliseconds\n"}, {"name": " max_frequency", "description": " Maximum random frequency in Hz. Default value is 5000 Hz.\n"}], "return": " Sound\n", "example": ">>> # Generate a random beep\n>>> generate_random_beep()\n", "snippet": "# Generate a random beep\ngenerate_random_beep()\n", "keywords": ["beep", "sound", "random", "noise", "alert", "notification"], "icon": "las la-volume-up"}, {"function_call": "generate_random_date(formatting=\"%m/%d/%Y %I%M\", days_in_past=1000)", "name": "Random date", "description": "Generates a random date.", "parameters": [{"name": " days_in_past", "description": " Days in the past for which oldest random date is generated, default is 1000 days\n"}, {"name": " formatting", "description": " Formatting of the dates, replace with 'None' to get raw datetime format. e.g. format='Current month is %B' generates 'Current month is Januari' and format='%m/%d/%Y %I:%M' generates format 01/01/1900 00:00. \n"}], "return": " Random date as string\n", "example": ">>> # Generate a random date\n>>> generate_random_date()\n01/01/2020 13:37'\n", "snippet": "# Generate a random date\ngenerate_random_date()\n", "keywords": ["random", "date", "datetime", "random date", "fake date ", "calendar"], "icon": "las la-calendar"}, {"function_call": "generate_date_today(formatting=\"%m/%d/%Y\")", "name": "Today's date", "description": "Generates today's date.", "parameters": [{"name": " formatting", "description": " Formatting of the dates, replace with 'None' to get raw datetime format. e.g. format='Current month is %B' generates 'Current month is Januari' and format='%m/%d/%Y %I:%M' generates format 01/01/1900 00:00. \n"}], "return": " Random date as string\n", "example": ">>> # Generate a random date\n>>> generate_date_today()\n'01/01/2022'\n", "snippet": "# Generate a random date\ngenerate_date_today()\n", "keywords": ["random", "date", "today", "now", "today date", "time", "datetime", "random date", "fake date ", "calendar"], "icon": "las la-calendar"}, {"function_call": "generate_unique_identifier()", "name": "Generate unique identifier", "description": "Generates a random UUID4 (universally unique identifier). While the probability that a UUID will be duplicated is not zero, it is close enough to zero to be negligible.", "parameters": [], "return": " Identifier as string\n", "example": ">>> # Generate unique identifier\n>>> generate_unique_identifier()\n'd72fd7ea-d682-4f78-8ca1-0ed34142a992'\n", "snippet": "# Generate unique identifier\ngenerate_unique_identifier()\n", "keywords": ["unique", "identifier", "primary key", "random"], "icon": "las la-random"}]}, {"name": "Output", "icon": "lab la-wpforms", "activities": [{"function_call": "display_osd_message(message=\"Example message\", seconds=5)", "name": "Display overlay message", "description": "Display custom OSD (on-screen display) message. Can be used to display a message for a limited amount of time. Can be used for illustration, debugging or as OSD.", "parameters": [{"name": " message", "description": " Message to be displayed\n"}, {"name": " seconds", "description": " Duration in seconds for message to be displayed\n"}], "return": "", "example": ">>> # Display overlay message\n>>> display_osd_message()\n", "snippet": "# Display overlay message\ndisplay_osd_message()\n", "keywords": ["message box", "osd", "overlay", "info warning", "info", "popup", "window", "feedback", "screen", "login", "attended"], "icon": "las la-tv"}, {"function_call": "print_console(data=\"Example print\")", "name": "Print message in console", "description": "Print message in console. Can be used to display data in the Automagica Flow console", "parameters": [{"name": " data", "description": " Data to be printed\n"}], "return": "", "example": ">>> # Print in console\n>>> print_console()\n", "snippet": "# Print in console\nprint_console()\n", "keywords": ["print", "box", "osd", "data", "debugging info", "popup", "window", "feedback", "screen", "login", "attended"], "icon": "las la-tv"}]}, {"name": "Browser", "icon": "lab la-chrome", "activities": [{"function_call": "Chrome()", "name": "self,", "description": "headless=False,incognito=False,disable_extension=False,maximize_window=True,focus_window=True,auto_update_chromedriver=True,):\"\"\"Open Chrome Browser", "parameters": [{"name": " load_images", "description": " Do not load images (bool). This could speed up loading pages\n"}, {"name": " headless", "description": " Run headless, this means running without a visible window (bool)\n"}, {"name": " incognito", "description": " Run in incognito mode\n"}, {"name": " disable_extension", "description": " Disable extensions\n"}, {"name": " auto_update_chromedriver", "description": " Automatically update Chromedriver\n"}], "return": "", "example": ">>> # Open the browser\n>>> browser = Chrome()\n>>> # Go to a website\n>>> browser.get('https://automagica.com')\n>>> # Close browser\n>>> browser.quit()\n", "snippet": "# Open the browser\nbrowser = Chrome()\n# Go to a website\nbrowser.get('https://automagica.com')\n# Close browser\nbrowser.quit()\n", "keywords": ["chrome", "browsing", "browser", "internet", "surfing", "web", "webscraping", "www", "selenium", "crawling", "webtesting", "mozilla", "firefox", "internet explorer"], "icon": "lab la-chrome"}, {"function_call": "save_all_images(output_path=None)", "name": "Save all images", "description": "Save all images on current page in the Browser", "parameters": [{"name": " output_path", "description": " Path where images can be saved. Default value is home directory.\n"}], "return": " List with paths to images\n", "example": ">>> # Open the browser\n>>> browser = Chrome()\n>>> # Go to a website\n>>> browser.get('https://www.nytimes.com/')\n>>> # Save all images\n>>> browser.save_all_images()\n>>> browser.quit()\n['C:\\\\Users\\\\<username>\\\\image1.png', 'C:\\\\Users\\\\<username>\\\\image2.jpg', 'C:\\\\Users\\\\<username>\\\\image4.gif']\n", "snippet": "# Open the browser\nbrowser = Chrome()\n# Go to a website\nbrowser.get('https://www.nytimes.com/')\n# Save all images\nbrowser.save_all_images()\nbrowser.quit()\n", "keywords": ["image scraping", "chrome", "internet", "browsing", "browser", "surfing", "web", "webscraping", "www", "selenium", "crawling", "webtesting", "mozilla", "firefox", "internet explorer"], "icon": "las la-images"}, {"function_call": "browse_to(url)", "name": "Browse to URL", "description": "Browse to URL.", "parameters": [{"name": " url", "description": " Url to browser to\n"}], "return": " Webpage\n", "example": ">>> # Open the browser\n>>> browser = Chrome()\n>>> # Go to a website\n>>> browser.browse_to('https://nytimes.com')\n", "snippet": "# Open the browser\nbrowser = Chrome()\n# Go to a website\nbrowser.browse_to('https://nytimes.com')\n", "keywords": ["chrome", "element", "browse to", "browse", "surf", "surf to", "go to", "get", "internet", "browsing", "browser", "surfing", "web", "webscraping", "www", "selenium", "crawling", "webtesting", "mozilla", "firefox", "internet explorer"], "icon": "lab la-chrome"}, {"function_call": "find_elements_by_text(text)", "name": "Find elements by text", "description": "Find all elements by their text. Text does not need to match exactly, part of text is enough.", "parameters": [{"name": " text", "description": " Text to find elements by\n"}], "return": " Elements that matched with text\n", "example": ">>> # Open the browser\n>>> browser = Chrome()\n>>> # Go to a website\n>>> browser.get('https://nytimes.com')\n>>> # Find elements by text\n>>> browser.find_elements_by_text('world')\n[webelement1, webelement2 , .. ]\n", "snippet": "# Open the browser\nbrowser = Chrome()\n# Go to a website\nbrowser.get('https://nytimes.com')\n# Find elements by text\nbrowser.find_elements_by_text('world')\n", "keywords": ["element", "element by text", "chrome", "internet", "browsing", "browser", "surfing", "web", "webscraping", "www", "selenium", "crawling", "webtesting", "mozilla", "firefox", "internet explorer"], "icon": "las la-align-center"}, {"function_call": "find_all_links(contains=\"\")", "name": "Find all links", "description": "Find all links on a webpage in the browser", "parameters": [{"name": " contains", "description": " Criteria of substring that url must contain to be included\n"}], "return": " Links\n", "example": ">>> # Open the browser\n>>> browser = Chrome()\n>>> # Go to a website\n>>> browser.get('https://nytimes.com')\n>>> # Find elements by text\n>>> browser.find_all_links()\n[webelement1, webelement2 , .. ]\n", "snippet": "# Open the browser\nbrowser = Chrome()\n# Go to a website\nbrowser.get('https://nytimes.com')\n# Find elements by text\nbrowser.find_all_links()\n", "keywords": ["random", "element,link", "links element by text", "chrome", "internet", "browsing", "browser", "surfing", "web", "webscraping", "www", "selenium", "crawling", "webtesting", "mozilla", "firefox", "internet explorer"], "icon": "las la-window-restore"}, {"function_call": "find_first_link(contains=None)", "name": "Find first link on a webpage", "description": "Find first link on a webpage", "parameters": [{"name": " contains", "description": " Criteria of substring that url must contain to be included\n"}], "return": " First link\n", "example": ">>> # Open the browser\n>>> browser = Chrome()\n>>> # Go to a website\n>>> browser.get('https://nytimes.com')\n>>> # Find elements by text\n>>> browser.find_first_link()\n", "snippet": "# Open the browser\nbrowser = Chrome()\n# Go to a website\nbrowser.get('https://nytimes.com')\n# Find elements by text\nbrowser.find_first_link()\n", "keywords": ["random", "link", "links", "element", "element by text", "chrome", "internet", "browsing", "browser", "surfing", "web", "webscraping", "www", "selenium", "crawling", "webtesting", "mozilla", "firefox", "internet explorer"], "icon": "las la-window-restore"}, {"function_call": "get_text_on_webpage(self)", "name": "Get all text on webpage", "description": "Get all the raw body text from current webpage", "parameters": [], "return": " Text\n", "example": ">>> # Open the browser\n>>> browser = Chrome()\n>>> # Go to a website\n>>> browser.get('https://nytimes.com')\n>>> # Get text from page\n>>> browser.get_text_on_webpage()\n", "snippet": "# Open the browser\nbrowser = Chrome()\n# Go to a website\nbrowser.get('https://nytimes.com')\n# Get text from page\nbrowser.get_text_on_webpage()\n", "keywords": ["random", "link", "links", "element", "element by text", "chrome", "internet", "browsing", "browser", "surfing", "web", "webscraping", "www", "selenium", "crawling", "webtesting", "mozilla", "firefox", "internet explorer"], "icon": "las la-window-restore"}, {"function_call": "highlight(element)", "name": "Highlight element", "description": "Highlight elements in yellow in the browser", "parameters": [{"name": " element", "description": " Element to highlight\n"}], "return": "", "example": ">>> # Open the browser\n>>> browser = Chrome()\n>>> # Go to a website\n>>> browser.get('https://wikipedia.org')\n>>> # Find first link on page\n>>> first_link = browser.find_elements_by_xpath(\"//a[@href]\")[0]\n>>> # Highlight first link\n>>> browser.highlight(first_link)\n", "snippet": "# Open the browser\nbrowser = Chrome()\n# Go to a website\nbrowser.get('https://wikipedia.org')\n# Find first link on page\nfirst_link = browser.find_elements_by_xpath(\"//a[@href]\")[0]\n# Highlight first link\nbrowser.highlight(first_link)\n", "keywords": ["element", "element by text", "chrome", "internet", "browsing", "browser", "surfing", "web", "webscraping", "www", "selenium", "crawling", "webtesting", "mozilla", "firefox", "internet explorer"], "icon": "las la-highlighter"}, {"function_call": "exit(self)", "name": "Exit the browser", "description": "Quit the browser by exiting gracefully. One can also use the native 'quit' function", "parameters": [], "return": "", "example": ">>> # Open the browser\n>>> browser = Chrome()\n>>> # Go to a website\n>>> browser.get('https://automagica.com')\n>>> # Close browser\n>>> browser.exit()\n", "snippet": "# Open the browser\nbrowser = Chrome()\n# Go to a website\nbrowser.get('https://automagica.com')\n# Close browser\nbrowser.exit()\n", "keywords": ["quit", "exit", "close", "element", "element by text", "chrome", "internet", "browsing", "browser", "surfing", "web", "webscraping", "www", "selenium", "crawling", "webtesting", "mozilla", "firefox", "internet explorer"], "icon": "las la-window-close"}, {"function_call": "by_xpaths(element)", "name": "Find all XPaths", "description": "Find all elements with specified xpath on a webpage in the the browser. Can also use native 'find_elements_by_xpath'", "parameters": [{"name": " element", "description": " Xpath of element\n"}], "return": " Element by xpaths\n", "example": ">>> # Open the browser\n>>> browser = Chrome()\n>>> # Go to a website\n>>> browser.get('https://wikipedia.org')\n>>> # Find elements by xpaths\n>>> browser.by_xpaths('//*[@id=\\'js-link-box-en\\']')\n[webelement1, webelement2 , .. ]\n", "snippet": "# Open the browser\nbrowser = Chrome()\n# Go to a website\nbrowser.get('https://wikipedia.org')\n# Find elements by xpaths\nbrowser.by_xpaths('//*[@id=\\'js-link-box-en\\']')\n", "keywords": ["random", "element", "xpath", "xml", "element by text", "chrome", "internet", "browsing", "browser", "surfing", "web", "webscraping", "www", "selenium", "crawling", "webtesting", "mozilla", "firefox", "internet explorer"], "icon": "las la-times"}, {"function_call": "by_xpath(element)", "name": "Find XPath in browser", "description": "Find all element with specified xpath on a webpage in the the browser. Can also use native 'find_elements_by_xpath'", "parameters": [{"name": " element", "description": " Xpath of element\n"}], "return": " Element by xpath\n", "example": ">>> # Open the browser\n>>> browser = Chrome()\n>>> # Go to a website\n>>> browser.get('https://wikipedia.org')\n>>> # Find element by xpath\n>>> element = browser.by_xpath('//*[@id=\\'js-link-box-en\\']')\n>>> # We can now use this element, for example to click on\n>>> element.click()\n", "snippet": "# Open the browser\nbrowser = Chrome()\n# Go to a website\nbrowser.get('https://wikipedia.org')\n# Find element by xpath\nelement = browser.by_xpath('//*[@id=\\'js-link-box-en\\']')\n# We can now use this element, for example to click on\nelement.click()\n", "keywords": ["random", "xpath", "element", "xml element by text", "chrome", "internet", "browsing", "browser", "surfing", "web", "webscraping", "www", "selenium", "crawling", "webtesting", "mozilla", "firefox", "internet explorer"], "icon": "las la-times"}, {"function_call": "by_class(element)", "name": "Find class in browser", "description": "Find element with specified class on a webpage in the the browser. Can also use native 'find_element_by_class_name'", "parameters": [{"name": " element", "description": " Class of element\n"}], "return": " Element by class\n", "example": ">>> # Open the browser\n>>> browser = Chrome()\n>>> # Go to a website\n>>> browser.get('https://wikipedia.org')\n>>> # Find element by class\n>>> element = browser.by_class('search-input')\n>>> # We can now use this element, for example to click on\n>>> element.click()\n", "snippet": "# Open the browser\nbrowser = Chrome()\n# Go to a website\nbrowser.get('https://wikipedia.org')\n# Find element by class\nelement = browser.by_class('search-input')\n# We can now use this element, for example to click on\nelement.click()\n", "keywords": ["browser", "class", "classes", "element", "xml element by text", "chrome", "internet", "browsing", "browser", "surfing", "web", "webscraping", "www", "selenium", "crawling", "webtesting", "mozilla", "firefox", "internet explorer"], "icon": "las la-times"}, {"function_call": "by_classes(element)", "name": "Find class in browser", "description": "Find all elements with specified class on a webpage in the the browser. Can also use native 'find_elements_by_class_name' function", "parameters": [{"name": " element", "description": " Class of element\n"}], "return": " Element by classes\n", "example": ">>> # Open the browser\n>>> browser = Chrome()\n>>> # Go to a website\n>>> browser.get('https://wikipedia.org')\n>>> # Find elements by class\n>>> elements = browser.by_classes('search-input')\n", "snippet": "# Open the browser\nbrowser = Chrome()\n# Go to a website\nbrowser.get('https://wikipedia.org')\n# Find elements by class\nelements = browser.by_classes('search-input')\n", "keywords": ["browser", "class", "classes", "element", "xml element by text", "chrome", "internet", "browsing", "browser", "surfing", "web", "webscraping", "www", "selenium", "crawling", "webtesting", "mozilla", "firefox", "internet explorer"], "icon": "las la-times"}, {"function_call": "by_class_and_by_text(element, text)", "name": "Find element in browser based on class and text", "description": "Find all elements with specified class and text on a webpage in the the browser.", "parameters": [{"name": " element", "description": " Class of element\n"}], "return": " Element by class and text\n", "example": ">>> # Open the browser\n>>> browser = Chrome()\n>>> # Go to a website\n>>> browser.get('https://wikipedia.org')\n>>> # Find elements by class and text\n>>> element = browser.by_class_and_by_text('search-input', 'Search Wikipedia')\n>>> # We can now use this element, for example to click on\n>>> element.click()\n", "snippet": "# Open the browser\nbrowser = Chrome()\n# Go to a website\nbrowser.get('https://wikipedia.org')\n# Find elements by class and text\nelement = browser.by_class_and_by_text('search-input', 'Search Wikipedia')\n# We can now use this element, for example to click on\nelement.click()\n", "keywords": ["browser", "class", "text", "name classes", "element", "xml element by text", "chrome", "internet", "browsing", "browser", "surfing", "web", "webscraping", "www", "selenium", "crawling", "webtesting", "mozilla", "firefox", "internet explorer"], "icon": "las la-times"}, {"function_call": "by_id(element)", "name": "Find id in browser", "description": "Find element with specified id on a webpage in the the browser. Can also use native 'find_element_by_id' function", "parameters": [{"name": " element", "description": " Id of element\n"}], "return": " Element by id\n", "example": ">>> # Open the browser\n>>> browser = Chrome()\n>>> # Go to a website\n>>> browser.get('https://wikipedia.org')\n>>> # Find element by class\n>>> elements = browser.by_id('search-input')\n>>> # We can now use this element, for example to click on\n>>> element.click()\n", "snippet": "# Open the browser\nbrowser = Chrome()\n# Go to a website\nbrowser.get('https://wikipedia.org')\n# Find element by class\nelements = browser.by_id('search-input')\n# We can now use this element, for example to click on\nelement.click()\n", "keywords": ["browser", "class", "classes", "element", "xml element by text", "chrome", "internet", "browsing", "browser", "surfing", "web", "webscraping", "www", "selenium", "crawling", "webtesting", "mozilla", "firefox", "internet explorer"], "icon": "las la-times"}, {"function_call": "switch_to_iframe(name=\"iframe\")", "name": "Switch to iframe in browser", "description": "Switch to an iframe in the browser", "parameters": [{"name": " name", "description": " Name of the Iframe\n"}], "return": "", "example": ">>> # Open the browser\n>>> browser = Chrome()\n>>> # Go to a website\n>>> browser.get('https://www.w3schools.com/html/html_iframe.asp')\n>>> # Switch to iframe\n>>> browser.switch_to_iframe()\n", "snippet": "# Open the browser\nbrowser = Chrome()\n# Go to a website\nbrowser.get('https://www.w3schools.com/html/html_iframe.asp')\n# Switch to iframe\nbrowser.switch_to_iframe()\n", "keywords": ["browser", "class", "classes", "element", "xml element by text", "chrome", "internet", "browsing", "browser", "surfing", "web", "webscraping", "www", "selenium", "crawling", "webtesting", "mozilla", "firefox", "internet explorer"], "icon": "las la-times"}]}, {"name": "Credential Management", "icon": "las la-key", "activities": [{"function_call": "set_credential(username=None, password=None, system=\"Automagica\")", "name": "Set credential", "description": "Add a credential which stores credentials locally and securely. All parameters should be Unicode text.", "parameters": [{"name": " username", "description": " Username for which credential will be added.\n"}, {"name": " password", "description": " Password to add\n"}, {"name": " system", "description": " Name of the system for which credentials are stored. Extra safety measure and method for keeping passwords for similar usernames on different applications a part. Highly recommended to change default value.\n"}], "return": " Stores credentials locally\n", "example": ">>> set_credential('SampleUsername', 'SamplePassword')\n", "snippet": "set_credential('SampleUsername', 'SamplePassword')\n", "keywords": ["credential", "login", "password", "username", "store", "vault", "secure", "credentials", "store", "log in", "encrypt"], "icon": "las la-key"}, {"function_call": "delete_credential(username=None, password=None, system=\"Automagica\")", "name": "Delete credential", "description": "Delete a locally stored credential. All parameters should be Unicode text.", "parameters": [{"name": " username", "description": " Username for which credential (username + password) will be deleted.\n"}, {"name": " password", "description": " Password to delete\n"}, {"name": " system", "description": " Name of the system for which password will be deleted. \n"}], "return": "", "example": ">>> set_credential('SampleUsername', 'SamplePassword')\n>>> delete_credential('SampleUsername', 'SamplePassword')\n", "snippet": "set_credential('SampleUsername', 'SamplePassword')\ndelete_credential('SampleUsername', 'SamplePassword')\n", "keywords": ["credential", "delete", "login", "password", "username", "store", "vault", "secure", "credentials", "store", "log in", "encrypt"], "icon": "las la-key"}, {"function_call": "get_credential(username=None, system=\"Automagica\")", "name": "Get credential", "description": "Get a locally stored redential. All parameters should be Unicode text.", "parameters": [{"name": " username", "description": " Username to get password for.\n"}, {"name": " system", "description": " Name of the system for which credentials are retreived.\n"}], "return": " Stored credential as string\n", "example": ">>> set_credential('SampleUsername', 'SamplePassword')\n>>> get_credential('SampleUsername')\n'SamplePassword'\n", "snippet": "set_credential('SampleUsername', 'SamplePassword')\nget_credential('SampleUsername')\n", "keywords": ["credential", "get", "delete", "login", "password", "username", "store", "vault", "secure", "credentials", "store", "log in", "encrypt"], "icon": "las la-key"}]}, {"name": "FTP", "icon": "las la-key", "activities": [{"function_call": "FTP(server, username, password)", "name": "Create FTP connection (insecure)", "description": "Can be used to automate activites for FTP", "parameters": [{"name": " server", "description": " Name of the server\n"}, {"name": " username", "description": " Username \n"}, {"name": " password", "description": " Password\n"}], "return": "", "example": ">>> # This example uses the Rebex FPT test server.\n>>> # Take caution uploading and downloading from this server as it is public\n>>> ftp = FTP('test.rebex.net', 'demo', 'password')\n", "snippet": "# This example uses the Rebex FPT test server.\n# Take caution uploading and downloading from this server as it is public\nftp = FTP('test.rebex.net', 'demo', 'password')\n", "keywords": ["FTP", "file transfer protocol", "filezilla", "winscp", "server", "remote", "folder", "folders"], "icon": "las la-folder-open"}, {"function_call": "download_file(input_path, output_path=None)", "name": "Download file", "description": "Downloads a file from FTP server. Connection needs to be established first.", "parameters": [{"name": " input_path", "description": " Path to the file on the FPT server to download\n"}, {"name": " output_path", "description": " Destination path for downloaded files. Default is the same directory with \"_downloaded\" added to the name\n"}], "return": " Path to output file as string \n", "example": ">>> # This example uses the Rebex FPT test server.\n>>> # Take caution uploading and downloading from this server as it is public\n>>> ftp = FTP('test.rebex.net', 'demo', 'password')\n>>> # Download Rebex public file 'readme.txt'\n>>> ftp.download_file('readme.txt')\n'C:\\\\Users\\\\<username>\\\\readme_downloaded.txt'\n", "snippet": "# This example uses the Rebex FPT test server.\n# Take caution uploading and downloading from this server as it is public\nftp = FTP('test.rebex.net', 'demo', 'password')\n# Download Rebex public file 'readme.txt'\nftp.download_file('readme.txt')\n", "keywords": ["FTP", "file transfer protocol", "download", "filezilla", "winscp", "server", "remote", "folder", "folders"], "icon": "las la-download"}, {"function_call": "upload_file(input_path, output_path=None)", "name": "Upload file", "description": "Upload file to FTP server", "parameters": [{"name": " input_path", "description": " Path file that will be uploaded\n"}, {"name": " output_path", "description": " Destination path to upload. \n"}], "return": " Path to uploaded file as string\n", "example": ">>> # This example uses the Rebex FPT test server.\n>>> # Take caution uploading and downloading from this server as it is public\n>>> ftp = FTP('test.rebex.net', 'demo', 'password')\n>>> # Create a .txt file for illustration\n>>> text_file = make_text_file()\n>>> # Upload file to FTP test server\n>>> # Note that this might result in a persmission error for public FPT's\n>>> ftp.upload_file(input_path = text_file)\n", "snippet": "# This example uses the Rebex FPT test server.\n# Take caution uploading and downloading from this server as it is public\nftp = FTP('test.rebex.net', 'demo', 'password')\n# Create a .txt file for illustration\ntext_file = make_text_file()\n# Upload file to FTP test server\n# Note that this might result in a persmission error for public FPT's\nftp.upload_file(input_path = text_file)\n", "keywords": ["FTP", "upload", "fptfile transfer protocol", "filezilla", "winscp", "server", "remote", "folder", "folders"], "icon": "las la-upload"}, {"function_call": "enumerate_files(path=\"/\")", "name": "List FTP files", "description": "Generate a list of all the files in the FTP directory", "parameters": [{"name": " path", "description": " Path to list files from. Default is the main directory\n"}], "return": " Prints list of all files and directories\n", "example": ">>> # This example uses the Rebex FPT test server.\n>>> # Take caution uploading and downloading from this server as it is public\n>>> ftp = FTP('test.rebex.net', 'demo', 'password')\n>>> # Show all files in main directory\n>>> ftp.enumerate_files()\n10-27-15  03:46PM       <DIR>          pub\n04-08-14  03:09PM                  403 readme.txt\n'226 Transfer complete.'\n", "snippet": "# This example uses the Rebex FPT test server.\n# Take caution uploading and downloading from this server as it is public\nftp = FTP('test.rebex.net', 'demo', 'password')\n# Show all files in main directory\nftp.enumerate_files()\n", "keywords": ["FTP", "list", "upload", "fptfile transfer protocol", "filezilla", "winscp", "server", "remote", "folder", "folders"], "icon": "las la-list-ol"}, {"function_call": "directory_exists(path=\"/\")", "name": "Check FTP directory", "description": "Check if FTP directory exists", "parameters": [{"name": " path", "description": " Path to check on existence. Default is main directory\n"}], "return": " Boolean\n", "example": ">>> # This example uses the Rebex FPT test server.\n>>> # Take caution uploading and downloading from this server as it is public\n>>> ftp = FTP('test.rebex.net', 'demo', 'password')\n>>> # Check if 'pub' folder exists in main directory\n>>> ftp.directory_exists('\\\\pub')\nTrue\n", "snippet": "# This example uses the Rebex FPT test server.\n# Take caution uploading and downloading from this server as it is public\nftp = FTP('test.rebex.net', 'demo', 'password')\n# Check if 'pub' folder exists in main directory\nftp.directory_exists('\\\\pub')\n", "keywords": ["FTP", "list", "upload", "fptfile transfer protocol", "filezilla", "winscp", "server", "remote", "folder", "folders"], "icon": "las la-list-ol"}, {"function_call": "create_directory(directory_name, path=\"/\")", "name": "Create FTP directory", "description": "Create a FTP directory. Note that sufficient permissions are present", "parameters": [{"name": " directory_name", "description": " Name of the new directory, should be a string e.g. 'my_directory'\n"}, {"name": " path", "description": " Path to parent directory where to make new directory. Default is main directory\n"}], "return": " Boolean if creation was succesful (True) or failed (False)\n", "example": ">>> # This example uses the Rebex FPT test server.\n>>> # Trying to create a directory will most likely fail due to permission\n>>> ftp = FTP('test.rebex.net', 'demo', 'password')\n>>> # Create directory\n>>> ftp.create_directory('brand_new_directory')      \nFalse\n", "snippet": "# This example uses the Rebex FPT test server.\n# Trying to create a directory will most likely fail due to permission\nftp = FTP('test.rebex.net', 'demo', 'password')\n# Create directory\nftp.create_directory('brand_new_directory')      \n", "keywords": ["FTP", "create", "create folder", "new", "new folder", "fptfile transfer protocol", "filezilla", "winscp", "server", "remote", "folder", "folders"], "icon": "las la-folder-plus"}]}, {"name": "Keyboard", "icon": "las la-keyboard", "activities": [{"function_call": "press_key(key=None, delay=1, perform_n_times=1, delay_between=0.5)", "name": "Press key", "description": "Press and release an entered key. Make sure your keyboard is on US layout (standard QWERTY).If you are using this on Mac Os you might need to grant access to your terminal application. (Security Preferences > Security & Privacy > Privacy > Accessibility)", "parameters": [{"name": " key", "description": " Key to press. This can also be a scan code (e.g: 33 for '!')\n"}, {"name": " delay", "description": " Delay before key is pressed in seconds, default is 1 second\n"}, {"name": " perform_n_times", "description": " How many times to perform the key press\n"}, {"name": " delay_between", "description": " Delay between key presses\n"}], "return": " Keypress\n", "example": ">>> # Open notepad to illustrate typing\n>>> run('notepad.exe')\n>>> # Press some keys\n>>> press_key('a')\n>>> press_key('enter')\n>>> press_key('b')\n>>> press_key('enter')\n>>> press_key('c')\n", "snippet": "# Open notepad to illustrate typing\nrun('notepad.exe')\n# Press some keys\npress_key('a')\npress_key('enter')\npress_key('b')\npress_key('enter')\npress_key('c')\n", "keywords": ["keyboard", "typing", "type", "key", "keystroke", "hotkey", "press", "press key"], "icon": "las la-keyboard"}, {"function_call": "press_key_combination(first_key, second_key, third_key=None, compatibility=False, delay=1)", "name": "Press key combination", "description": "Press a combination of two or three keys simultaneously. Make sure your keyboard is on US layout (standard QWERTY).", "parameters": [{"name": " first_key", "description": " First key to press\n"}, {"name": " second_key", "description": " Second key to press\n"}, {"name": " third_key", "description": " Third key to press, this is optional.\n"}, {"name": " compatibility", "description": " Set parameter to true to not use win32com. This could help with compatibility on certain systems or when certain keypresses do not work correctly.\n"}, {"name": " key", "description": " Delay before keys are pressed in seconds, default is 1 second\n"}], "return": " Key combination\n", "example": ">>> # Open notepad to illustrate typing\n>>> run('notepad.exe')\n>>> # Press 'ctrl + s' to prompt save window \n>>> press_key_combination('ctrl', 's')\n", "snippet": "# Open notepad to illustrate typing\nrun('notepad.exe')\n# Press 'ctrl + s' to prompt save window \npress_key_combination('ctrl', 's')\n", "keywords": ["keyboard", "key combination", "shortcut", "typing", "type", "key", "keystroke", "hotkey", "press", "press key"], "icon": "las la-keyboard"}, {"function_call": "typing(text, automagica_id=None, clear=False, interval_seconds=0.01, delay=1)", "name": "Type text", "description": "Simulate keystrokes. If an element ID is specified, text will be typed in a specific field or element based on the element ID (vision) by the recorder.", "parameters": [{"name": " text", "description": " Text in string format to type. Note that you can only press single character keys. Special keys can not be part of the text argument.\n"}, {"name": " automagica_id", "description": " ID of the element. To define an element and attach an ID one can use the Automagica Wand. The recorder uses vision to detect an element and can be invoked with the recorder() function.\n"}, {"name": " clear", "description": " Attempts to clear the element before typing using hotkeys. Be cautious when using this method as a vision mismatch could result in deleting unwanted data. Default value is False\n"}, {"name": " interval_seconds", "description": " Time in seconds between two keystrokes. Defautl value is 0.01 seconds.\n"}, {"name": " delay", "description": " Delay before beginning to type, default is 1 second\n"}], "return": " Keystrokes\n", "example": ">>> # Open notepad to illustrate typing\n>>> run('notepad.exe')\n>>> # Type a story\n>>> typing('Why was the robot mad? \\n They kept pushing his buttons!')\n", "snippet": "# Open notepad to illustrate typing\nrun('notepad.exe')\n# Type a story\ntyping('Why was the robot mad? \\n They kept pushing his buttons!')\n", "keywords": ["keyboard", "keystrokes", "key combination", "shortcut", "typing", "type", "key", "keystroke", "hotkey", "press", "press key", "send keys", "keystrokes"], "icon": "las la-keyboard"}]}, {"name": "Mouse", "icon": "las la-mouse-pointer", "activities": [{"function_call": "get_mouse_position(delay=None, to_clipboard=False)", "name": "Get mouse coordinates", "description": "Get the x and y pixel coordinates of current mouse position.These coordinates represent the absolute pixel position of the mouse on the computer screen. The x-co\u00f6rdinate starts on the left side and increases going right. The y-co\u00f6rdinate increases going down.", "parameters": [{"name": " delay", "description": " Delay in seconds before capturing mouse position.\n"}, {"name": " to_clipboard", "description": " Put the coordinates in the clipboard e.g. 'x=1, y=1'\n"}], "return": " Tuple with (x, y) coordinates\n", "example": ">>> get_mouse_position()\n(314, 271)\n", "snippet": "get_mouse_position()\n", "keywords": ["mouse", "mouse automation", "click", "right click", "mouse button", "move mouse", "position", "pixel"], "icon": "las la-mouse"}, {"function_call": "display_mouse_position(duration=10)", "name": "Display mouse position", "description": "Displays mouse position in an overlay. Refreshes every two seconds. Can be used to find mouse position of element on the screen.These coordinates represent the absolute pixel position of the mouse on the computer screen. The x-co\u00f6rdinate starts on the left side and increases going right. The y-co\u00f6rdinate increases going down.", "parameters": [{"name": " duration", "description": " Duration to show overlay.\n"}], "return": " Overlay with (x, y) coordinates\n", "example": ">>> display_mouse_position()\n", "snippet": "display_mouse_position()\n", "keywords": ["mouse", "osd", "overlay", "show", "display", "mouse automation", "click", "right click", "mouse button", "move mouse", "position", "pixel"], "icon": "lars la-search-location"}, {"function_call": "click(automagica_id, delay=1)", "name": "Mouse click", "description": "Clicks on an element based on the element ID (vision)", "parameters": [{"name": " automagica_id", "description": " ID of the element. To define an element and attach an ID one can use the Automagica Wand. The recorder uses vision to detect an element and can be invoked with the recorder() function.\n"}, {"name": " delay", "description": " Delay before clicking in seconds. \n"}], "return": "", "example": ">>> # Click on a vision element, use the recorder() function to define elements\n>>> # Run the Windows calculator and try to perform the activity\n>>> run('calc.exe')\n>>> # Use the element ID found by the recorder, in this case ID 'qf41'. You can also view this on automagica.id/qf41 \n>>> #  If you have a vastly different version or layout the element might not be found, use the recorder \n>>> click('qf41')\n", "snippet": "# Click on a vision element, use the recorder() function to define elements\n# Run the Windows calculator and try to perform the activity\nrun('calc.exe')\n# Use the element ID found by the recorder, in this case ID 'qf41'. You can also view this on automagica.id/qf41 \n#  If you have a vastly different version or layout the element might not be found, use the recorder \nclick('qf41')\n", "keywords": ["mouse", "vision", "mouse", "osd", "overlay", "show", "display", "mouse automation", "click", "right click", "mouse button", "move mouse", "position", "pixel"], "icon": "las la-mouse-pointer"}, {"function_call": "click_coordinates(x=None, y=None, delay=1)", "name": "Mouse click coordinates", "description": "Clicks on an element based on pixel position determined by x and y coordinates. To find coordinates one could use display_mouse_position().", "parameters": [{"name": " x", "description": " X-coordinate\n"}, {"name": " y", "description": " Y-coordinate\n"}, {"name": " delay", "description": " Delay before clicking in seconds. \n"}], "return": "", "example": ">>> # Click on pixel position\n>>> click_coordinates(x=100, y=100)\n", "snippet": "# Click on pixel position\nclick_coordinates(x=100, y=100)\n", "keywords": ["mouse", "vision", "mouse", "osd", "overlay", "show", "display", "mouse automation", "click", "right click", "mouse button", "move mouse", "position", "pixel"], "icon": "las la-mouse-pointer"}, {"function_call": "double_click_coordinates(x=None, y=None, delay=1)", "name": "Double mouse click coordinates", "description": "Double clicks on a pixel position determined by x and y coordinates.", "parameters": [{"name": " x", "description": " X-coordinate\n"}, {"name": " y", "description": " Y-coordinate\n"}, {"name": " delay", "description": " Delay before cliking in seconds. \n"}], "return": "", "example": ">>> # Click on coordinates\n>>> double_click_coordinates(x=100, y=100)\n", "snippet": "# Click on coordinates\ndouble_click_coordinates(x=100, y=100)\n", "keywords": ["mouse", "osd", "overlay", "double", "double click", "doubleclick show", "display", "mouse automation", "click", "right click", "mouse button", "move mouse", "position", "pixel"], "icon": "las la-mouse-pointer"}, {"function_call": "double_click(automagica_id=None, delay=1)", "name": "Double mouse click", "description": "Double clicks on an element based on the element ID (vision)", "parameters": [{"name": " automagica_id", "description": " ID of the element. To define an element and attach an ID one can use the Automagica Wand. The recorder uses vision to detect an element and can be invoked with the recorder() function.\n"}, {"name": " delay", "description": " Delay before clicking in seconds. \n"}], "return": "", "example": ">>> # Click on a vision element, use the recorder() function to define elements\n>>> # Run the Windows calculator and try to perform the activity\n>>> run('calc.exe')\n>>> # Use the element ID found by the recorder, in this case ID 'qf41'. You can also view this on automagica.id/qf41 \n>>> #  If you have a vastly different version or layout the element might not be found, use the recorder \n>>> double_click('qf41')\n", "snippet": "# Click on a vision element, use the recorder() function to define elements\n# Run the Windows calculator and try to perform the activity\nrun('calc.exe')\n# Use the element ID found by the recorder, in this case ID 'qf41'. You can also view this on automagica.id/qf41 \n#  If you have a vastly different version or layout the element might not be found, use the recorder \ndouble_click('qf41')\n", "keywords": ["mouse", "osd", "overlay", "double", "double click", "doubleclick show", "display", "mouse automation", "click", "right click", "mouse button", "move mouse", "position", "pixel"], "icon": "las la-mouse-pointer"}, {"function_call": "right_click(automagica_id=None, delay=1)", "name": "Right click", "description": "Right clicks on an element based on the element ID (vision)", "parameters": [{"name": " automagica_id", "description": " ID of the element. To define an element and attach an ID one can use the Automagica Wand. The recorder uses vision to detect an element and can be invoked with the recorder() function.\n"}, {"name": " delay", "description": " Delay before cliking in seconds. \n"}], "return": "", "example": ">>> # Click on a vision element, use the recorder() function to define elements\n>>> # Run the Windows calculator and try to perform the activity\n>>> run('calc.exe')\n>>> # Use the element ID found by the recorder, in this case ID 'qf41'. You can also view this on automagica.id/qf41 \n>>> #  If you have a vastly different version or layout the element might not be found, use the recorder \n>>> right_click('qf41')\n", "snippet": "# Click on a vision element, use the recorder() function to define elements\n# Run the Windows calculator and try to perform the activity\nrun('calc.exe')\n# Use the element ID found by the recorder, in this case ID 'qf41'. You can also view this on automagica.id/qf41 \n#  If you have a vastly different version or layout the element might not be found, use the recorder \nright_click('qf41')\n", "keywords": ["mouse", "osd", "right click", "right", "rightclick", "overlay", "show", "display", "mouse automation", "click", "right click", "mouse button", "move mouse", "position", "pixel"], "icon": "las la-mouse-pointer"}, {"function_call": "right_click_coordinates(x=None, y=None, delay=1)", "name": "Right click coordinates", "description": "Right clicks on an element based pixel position determined by x and y coordinates.", "parameters": [{"name": " x", "description": " X-co\u00f6rdinate\n"}, {"name": " y", "description": " Y-co\u00f6rdinate\n"}, {"name": " delay", "description": " Delay before clicking in seconds \n"}], "return": "", "example": ">>> # Right click on coordinates\n>>> right_click_coordinates(x=100, y=100)\n", "snippet": "# Right click on coordinates\nright_click_coordinates(x=100, y=100)\n", "keywords": ["mouse", "osd", "right click", "right", "rightclick", "overlay", "show", "display", "mouse automation", "click", "right click", "mouse button", "move mouse", "position", "pixel"], "icon": "las la-mouse-pointer"}, {"function_call": "move_mouse_to(automagica_id=None, delay=1)", "name": "Move mouse", "description": "Moves te pointer to an element based on the element ID (vision)", "parameters": [{"name": " automagica_id", "description": " ID of the element. To define an element and attach an ID one can use the Automagica Wand. The recorder uses vision to detect an element and can be invoked with the recorder() function.\n"}, {"name": " delay", "description": " Delay before movement in seconds \n"}], "return": " Move mouse to (x, y) coordinates\n", "example": ">>> # Use recorder to find an element ID\n>>> # Run the Windows calculator and try to perform the activity\n>>> run('calc.exe')\n>>> # Use the element ID found by the recorder, in this case ID 'qf41'. You can also view this on automagica.id/qf41 \n>>> #  If you have a vastly different version or layout the element might not be found, use the recorder \n>>> move_mouse_to('qf41')\n", "snippet": "# Use recorder to find an element ID\n# Run the Windows calculator and try to perform the activity\nrun('calc.exe')\n# Use the element ID found by the recorder, in this case ID 'qf41'. You can also view this on automagica.id/qf41 \n#  If you have a vastly different version or layout the element might not be found, use the recorder \nmove_mouse_to('qf41')\n", "keywords": ["mouse", "osd", "move mouse", "right click", "right", "rightclick", "overlay", "show", "display", "mouse automation", "click", "right click", "mouse button", "move mouse", "position", "pixel"], "icon": "las la-arrows-alt"}, {"function_call": "move_mouse_to_coordinates(x=None, y=None, delay=1)", "name": "Move mouse coordinates", "description": "Moves te pointer to an element based on the pixel position determined by x and y coordinates", "parameters": [{"name": " x", "description": " X-co\u00f6rdinate\n"}, {"name": " y", "description": " Y-co\u00f6rdinate\n"}, {"name": " delay", "description": " Delay between movements in seconds, standard value is 1s. \n"}], "return": " Move mouse to (x, y) coordinates\n", "example": ">>> # Move mouse to coordinates\n>>> move_mouse_to_coordinates(x=100, y=100)\n", "snippet": "# Move mouse to coordinates\nmove_mouse_to_coordinates(x=100, y=100)\n", "keywords": ["mouse", "osd", "move mouse", "right click", "right", "rightclick", "overlay", "show", "display", "mouse automation", "click", "right click", "mouse button", "move mouse", "position", "pixel"], "icon": "las la-arrows-alt"}, {"function_call": "move_mouse_relative(x=None, y=None)", "name": "Move mouse relative", "description": "Moves the mouse an x- and y- distance relative to its current pixel position.", "parameters": [{"name": " x", "description": " X-co\u00f6rdinate\n"}, {"name": " y", "description": " Y-co\u00f6rdinate\n"}], "return": " Move mouse (x, y) coordinates\n", "example": ">>> move_mouse_to_coordinates(x=100, y=100)\n>>> wait(1)\n>>> move_mouse_relative(x=10, y=10)\n", "snippet": "move_mouse_to_coordinates(x=100, y=100)\nwait(1)\nmove_mouse_relative(x=10, y=10)\n", "keywords": ["mouse", "osd", "move mouse", "right click", "right", "rightclick", "overlay", "show", "display", "mouse automation", "click", "right click", "mouse button", "move mouse", "position", "pixel"], "icon": "las la-arrows-alt"}, {"function_call": "drag_mouse_to_coordinates(x=None, y=None, delay=1)", "name": "Drag mouse", "description": "Drags mouse to an element based on pixel position determined by x and y coordinates", "parameters": [{"name": " x", "description": " X-co\u00f6rdinate\n"}, {"name": " y", "description": " Y-co\u00f6rdinate\n"}, {"name": " delay", "description": " Delay between movements in seconds, standard value is 1s. \n"}], "return": " Drag mouse \n", "example": ">>> # Use coordinates to move and drag mouse\n>>> move_mouse_to_coordinates(x=100, y=100)\n>>> drag_mouse_to_coordinates(x=1, y=1)\n", "snippet": "# Use coordinates to move and drag mouse\nmove_mouse_to_coordinates(x=100, y=100)\ndrag_mouse_to_coordinates(x=1, y=1)\n", "keywords": ["mouse", "osd", "move mouse", "right click", "right", "rightclick", "overlay", "show", "display", "mouse automation", "click", "right click", "mouse button", "move mouse", "position", "pixel"], "icon": "las la-arrows-alt"}, {"function_call": "drag_mouse_to(automagica_id=None, end_x=0, end_y=0, delay=1)", "name": "Drag mouse", "description": "Drags mouse to an element based on the element ID (vision)", "parameters": [{"name": " automagica_id", "description": " ID of the element. To define an element and attach an ID one can use the Automagica Wand. The recorder uses vision to detect an element and can be invoked with the recorder() function.\n"}, {"name": " delay", "description": " Delay before movement in seconds.\n"}], "return": " Drag mouse \n", "example": ">>> # Use recorder to find an element ID\n>>> # Run the Windows calculator and try to perform the activity\n>>> run('calc.exe')\n>>> # Use the element ID found by the recorder, in this case ID 'qf41'. You can also view this on automagica.id/qf41 \n>>> #  If you have a vastly different version or layout the element might not be found, use the recorder \n>>> drag_mouse_to('qf41')\n", "snippet": "# Use recorder to find an element ID\n# Run the Windows calculator and try to perform the activity\nrun('calc.exe')\n# Use the element ID found by the recorder, in this case ID 'qf41'. You can also view this on automagica.id/qf41 \n#  If you have a vastly different version or layout the element might not be found, use the recorder \ndrag_mouse_to('qf41')\n", "keywords": ["mouse", "osd", "move mouse", "right click", "right", "rightclick", "overlay", "show", "display", "mouse automation", "click", "right click", "mouse button", "move mouse", "position", "pixel"], "icon": "las la-arrows-alt"}]}, {"name": "Image", "icon": "las la-image", "activities": [{"function_call": "random_screen_snippet(size=100, output_path=None)", "name": "Random screen snippet", "description": "Take a random square snippet from the current screen. Mainly for testing and/or development purposes.", "parameters": [{"name": " size", "description": " Size (width and height) in pixels for square snippet. Default value is 100 pixels\n"}, {"name": " output_path", "description": " Path where snippet will be saved. Default value is home directory with name 'random_screensnippet.jpg'\n"}], "return": " Path to snippet\n", "example": ">>> random_screen_snippet()\n'C:\\\\Users\\\\<username>\\\\random_screensnippet.jpg'\n", "snippet": "random_screen_snippet()\n", "keywords": ["image", "random", "testing", "screengrab", "snippet"], "icon": "las la-crop-alt"}, {"function_call": "take_screenshot(output_path=None)", "name": "Screenshot", "description": "Take a screenshot of current screen.", "parameters": [{"name": " output_path", "description": " Path to save screenshot. Default value is home directory with name 'screenshot.jpg'.\n"}], "return": " Path to save screenshot\n", "example": ">>> new_screenshot = take_screenshot()\n>>> open_file(new_screenshot)\n'C:\\\\Users\\\\<username>\\\\screenshot.jpg'\n", "snippet": "new_screenshot = take_screenshot()\nopen_file(new_screenshot)\n", "keywords": ["image", "screenshot", "printscreen,"], "icon": "las la-expand"}]}, {"name": "Folder Operations", "icon": "las la-folder-open", "activities": [{"function_call": "get_files_in_folder(input_path=None, extension=None, show_full_path=True, scan_subfolders=False)", "name": "List files in folder", "description": "List all files in a folder (and subfolders)Checks all folders and subfolders for files. This could take some time for large repositories.", "parameters": [{"name": " input_path", "description": " Path of the folder to retreive files from. Default folder is the home directory.\n"}, {"name": " extension", "description": " Optional filter on certain extensions, for example 'pptx', 'exe,' xlsx', 'txt', .. Default value is no filter.\n"}, {"name": " show_full_path", "description": " Set this to True to show full path, False will only show file or dirname. Default is True\n"}], "return": " List of files with their full path\n", "example": ">>> # List all files in the homedirectory\n>>> get_files_in_folder()\n['C:\\\\Users\\\\<username>\\\\file1.jpg', 'C:\\\\Users\\\\<username>\\\\file2.txt', ... ]\n", "snippet": "# List all files in the homedirectory\nget_files_in_folder()\n", "keywords": ["folder", "files", "explorer", "nautilus", "folder", "file", "create folder", "get files", "list files", "all files", "overview", "get files"], "icon": "las la-search"}, {"function_call": "create_folder(path=None)", "name": "Create folder", "description": "Creates new folder at the given path.", "parameters": [{"name": " path", "description": " Full path of folder that will be created. If no path is specified a folder called 'new_folder' will be made in home directory. If this folder already exists 8 random characters will be added to the name.\n"}], "return": " Path to new folder as string\n", "example": ">>> # Create folder in the home directory\n>>> create_folder()\n'C:\\\\Users\\\\<username>\\\\new_folder'\n", "snippet": "# Create folder in the home directory\ncreate_folder()\n", "keywords": ["create folder", "folder", "new folder", " folders", "make folder", "new folder", "folder manipulation", "explorer", "nautilus"], "icon": "las la-folder-plus"}, {"function_call": "rename_folder(input_path, output_name=None)", "name": "Rename folder", "description": "Rename a folder", "parameters": [{"name": " input_path", "description": " Full path of folder that will be renamed\n"}, {"name": " output_name", "description": " New name. By default folder will be renamed to original folder name with '_renamed' added to the folder name.\n"}], "return": " Path to renamed folder as a string.\n", "example": ">>> # Make new folder in home directory for illustration\n>>> testfolder = create_folder()\n>>> # Rename the folder\n>>> rename_folder(testfolder, output_name='testfolder_brand_new_name')\n'C:\\\\Users\\\\<username>\\\\testfolder_brand_new_name'\n", "snippet": "# Make new folder in home directory for illustration\ntestfolder = create_folder()\n# Rename the folder\nrename_folder(testfolder, output_name='testfolder_brand_new_name')\n", "keywords": ["folder", "rename", "rename folder", "organise folder", "folders", "folder manipulation", "explorer", "nautilus"], "icon": "las la-folder"}, {"function_call": "show_folder(input_path=None)", "name": "Open a folder", "description": "Open a folder with the default explorer.", "parameters": [{"name": " input_path", "description": " Full path of folder that will be opened. Default value is the home directory\n"}], "return": " Path to open folder as a string\n", "example": ">>> # Make new folder in home directory for illustration\n>>> testfolder = create_folder()\n>>> # Open folder\n>>> show_folder(testfolder)\n'C:\\\\Users\\\\<username>\\\\new_folder'\n", "snippet": "# Make new folder in home directory for illustration\ntestfolder = create_folder()\n# Open folder\nshow_folder(testfolder)\n", "keywords": ["folder", "open", "open folder", "explorer", "nautilus"], "icon": "las la-folder-open"}, {"function_call": "move_folder(input_path, output_path=None)", "name": "Move a folder", "description": "Moves a folder from one place to another.", "parameters": [{"name": " input_path", "description": " Full path to the source location of the folder\n"}, {"name": " output_path", "description": " Full path to the destination location of the folder, defaults to input_path with '_moved' added\n"}], "return": " Path to new location of folder as a string. None if folder could not be moved.\n", "example": ">>> # Make new folder in home directory for illustration\n>>> # If no new_folder exists in home dir this will be called new_folder\n>>> testfolder = create_folder()\n>>> # Make a second new folder\n>>> # Since new_folder already exists this folder will get a random id added (in this case abc1)\n>>> testfolder_2 = create_folder()\n>>> # Move testfolder in testfolder_2\n>>> move_folder(testfolder, testfolder_2)\n'C:\\\\Users\\\\<username>\\\\new_folder_abc1\\\\new_folder'\n", "snippet": "# Make new folder in home directory for illustration\n# If no new_folder exists in home dir this will be called new_folder\ntestfolder = create_folder()\n# Make a second new folder\n# Since new_folder already exists this folder will get a random id added (in this case abc1)\ntestfolder_2 = create_folder()\n# Move testfolder in testfolder_2\nmove_folder(testfolder, testfolder_2)\n", "keywords": ["folder", "move", "move folder", "explorer", "nautilus", "folder manipulation"], "icon": "las la-folder"}, {"function_call": "remove_folder(input_path, allow_root=False, delete_read_only=True)", "name": "Remove folder", "description": "Remove a folder including all subfolders and files. For the function to work optimal, all files and subfolders in the main targetfolder should be closed.", "parameters": [{"name": " input_path", "description": " Full path to the folder that will be deleted\n"}, {"name": " allow_root", "description": " Allow paths with an arbitrary length of 10 characters or shorter to be deleted. Default value is False.\n"}, {"name": " delete_read_only", "description": " Option to delete read only\n"}], "return": " Path to deleted folder as a string\n", "example": ">>> # Make new folder in home directory for illustration\n>>> testfolder = create_folder()\n>>> # Check if folder exists\n>>> print( folder_exists(testfolder) ) # Should print True\n>>> # Remove folder\n>>> remove_folder(testfolder)\n>>> # Check again if folder exists\n>>> folder_exists(testfolder)\nFalse\n", "snippet": "# Make new folder in home directory for illustration\ntestfolder = create_folder()\n# Check if folder exists\nprint( folder_exists(testfolder) ) # Should print True\n# Remove folder\nremove_folder(testfolder)\n# Check again if folder exists\nfolder_exists(testfolder)\n", "keywords": ["folder", "delete folder", "delete", "nautilus", "folder manipulation", "explorer", "delete folder", "remove", "remove folder"], "icon": "las la-folder-minus"}, {"function_call": "empty_folder(input_path, allow_root=False)", "name": "Empty folder", "description": "Remove all contents from a folderFor the function to work optimal, all files and subfolders in the main targetfolder should be closed.", "parameters": [{"name": " input_path", "description": " Full path to the folder that will be emptied\n"}, {"name": " allow_root", "description": " Allow paths with an arbitrary length of 10 characters or shorter to be emptied. Default value is False.\n"}], "return": "", "example": ">>> # Make new folder in home directory for illustration\n>>> testfolder = create_folder()\n>>> # Make new text file in this folder\n>>> text_file_location = make_text_file(output_path = testfolder)\n>>> # Print all files in the testfolder\n>>> get_files_in_folder(testfolder) \n>>> # Empty the folder\n>>> empty_folder(testfolder)\n>>> # Check what is in the folder\n>>> get_files_in_folder(testfolder)\n[]\n", "snippet": "# Make new folder in home directory for illustration\ntestfolder = create_folder()\n# Make new text file in this folder\ntext_file_location = make_text_file(output_path = testfolder)\n# Print all files in the testfolder\nget_files_in_folder(testfolder) \n# Empty the folder\nempty_folder(testfolder)\n# Check what is in the folder\nget_files_in_folder(testfolder)\n", "keywords": ["folder", "empty folder", "delete", "empty", "clean", "clean folder", "nautilus", "folder manipulation", "explorer", "delete folder", "remove", "remove folder"], "icon": "las la-folder-minus"}, {"function_call": "folder_exists(path)", "name": "Checks if folder exists", "description": "Check whether folder exists or not, regardless if folder is empty or not.", "parameters": [{"name": " input_path", "description": " Full path to folder\n"}], "return": " Boolean\n", "example": ">>> # Make new folder in home directory for illustration\n>>> testfolder = create_folder()\n>>> # Check if folder exists\n>>> folder_exists(testfolder)\nTrue\n", "snippet": "# Make new folder in home directory for illustration\ntestfolder = create_folder()\n# Check if folder exists\nfolder_exists(testfolder)\n", "keywords": ["folder", "folder exists", "nautilus", "explorer", "folder manipulation", "files"], "icon": "las la-folder"}, {"function_call": "copy_folder(input_path, output_path=None)", "name": "Copy a folder", "description": "Copies a folder from one place to another.", "parameters": [{"name": " input_path", "description": " Full path to the source location of the folder\n"}, {"name": " output_path", "description": " Full path to the destination location of the folder. If no path is specified folder will get copied in the input directory with '_copied' added\n"}], "return": " Path to new folder as string\n", "example": ">>> # Make new folder in home directory for illustration\n>>> testfolder = create_folder()\n>>> # Copy this folder\n>>> # Since new_folder already exists in home dir this folder will get a random id added (in this case abc1)\n>>> copy_folder(testfolder)\n", "snippet": "# Make new folder in home directory for illustration\ntestfolder = create_folder()\n# Copy this folder\n# Since new_folder already exists in home dir this folder will get a random id added (in this case abc1)\ncopy_folder(testfolder)\n", "keywords": ["folder", "move", "move folder", "explorer", "nautilus", "folder manipulation"], "icon": "lar la-folder"}, {"function_call": "zip_folder(input_path, output_path=None)", "name": "Zip", "description": "Zip folder and its contents. Creates a .zip file.", "parameters": [{"name": " input_path", "description": " Full path to the source location of the folder that will be zipped\n"}, {"name": " output_path", "description": " Full path to save the zipped folder. If no path is specified a folder with the original folder with '_zipped' added\n"}], "return": " Path to zipped folder\n", "example": ">>> # Make new folder in home directory for illustration\n>>> testfolder = create_folder()\n>>> # Zip this folder\n>>> zip_folder(testfolder)\n", "snippet": "# Make new folder in home directory for illustration\ntestfolder = create_folder()\n# Zip this folder\nzip_folder(testfolder)\n", "keywords": ["zip", "zipping", "winrar", "rar", "7zip", "compress", "unzip"], "icon": "las la-archive"}, {"function_call": "unzip(input_path, output_path=None)", "name": "Unzip", "description": "Unzips a file or folder from a .zip file.", "parameters": [{"name": " input_path", "description": " Full path to the source location of the file or folder that will be unzipped\n"}, {"name": " to_path", "description": " Full path to save unzipped contents. If no path is specified the unzipped contents will be stored in the same directory as the zipped file is located. \n"}], "return": " Path to unzipped folder\n", "example": ">>> # Make new file in home directory for illustration\n>>> testfolder = create_folder()\n>>> # Add some files to this folder\n>>> make_text_file(output_path = testfolder)\n>>> # Zip this folder\n>>> zipped_folder = zip_folder(testfolder)\n>>> # Unzip this folder\n>>> unzip(zipped_folder)\n", "snippet": "# Make new file in home directory for illustration\ntestfolder = create_folder()\n# Add some files to this folder\nmake_text_file(output_path = testfolder)\n# Zip this folder\nzipped_folder = zip_folder(testfolder)\n# Unzip this folder\nunzip(zipped_folder)\n", "keywords": ["zip", "zipping", "winrar", "rar", "7zip", "compress", "unzip"], "icon": "las la-archive"}, {"function_call": "most_recent_file(input_path=None)", "name": "Return most recent file in directory", "description": "Return most recent file in directory", "parameters": [{"name": " input_path", "description": " Path which will be scanned for most recent file, defaults to homedir\n"}], "return": " Path to most recent file\n", "example": ">>> # Find most recent file in homedir\n>>> most_recent_file()\n", "snippet": "# Find most recent file in homedir\nmost_recent_file()\n", "keywords": ["find file", "file", "recent", "newest", "latest", "recent"], "icon": "las la-clock"}]}, {"name": "Delay", "icon": "las la-hourglass", "activities": [{"function_call": "wait(seconds=1)", "name": "Wait", "description": "Make the robot wait for a specified number of seconds. Note that this activity is blocking. This means that subsequent activities will not occur until the the specified waiting time has expired.", "parameters": [{"name": " seconds", "description": " Time in seconds to wait\n"}], "return": "", "example": ">>> print('Start the wait')\n>>> wait()\n>>> print('The wait is over')\n", "snippet": "print('Start the wait')\nwait()\nprint('The wait is over')\n", "keywords": ["wait", "sleep", "time", "timeout", "time-out", "hold", "pause"], "icon": "las la-hourglass"}, {"function_call": "wait_folder_exists(input_path, timeout=60)", "name": "Wait for folder", "description": "Waits until a folder exists.Note that this activity is blocking and will keep the system waiting.", "parameters": [{"name": " input_path", "description": " Full path to folder.\n"}, {"name": " timeout", "description": " Maximum time in seconds to wait before continuing. Default value is 60 seconds.\n"}], "return": "", "example": ">>> # Create a random folder\n>>> testfolder = create_folder()\n>>> # Wait for the snippet to be visible\n>>> wait_folder_exists(testfolder)\n", "snippet": "# Create a random folder\ntestfolder = create_folder()\n# Wait for the snippet to be visible\nwait_folder_exists(testfolder)\n", "keywords": ["image matching", "wait", "pause", "vision", "template", "template matching"], "icon": "las la-hourglass"}]}, {"name": "Word Application", "icon": "las la-file-word", "activities": [{"function_call": "Word(file_path=None, visible=True)", "name": "Start Word Application", "description": "For this activity to work, Microsoft Office Word needs to be installed on the system.", "parameters": [{"name": " file_path", "description": " Enter a path to open Word with an existing Word file. If no path is specified a document will be initialized, this is the default value.\n"}, {"name": " visible", "description": " Show Word in the foreground if True or hide if False, defaults to True.\n"}], "return": " Application object (win32com.client)\n", "example": ">>> word = Word()\n", "snippet": "word = Word()\n", "keywords": ["word", "editor", "text", "text edit", "office", "document", "microsoft word", "doc", "docx"], "icon": "lar la-file-word"}, {"function_call": "save(self)", "name": "Save", "description": "Save active Word document", "parameters": [], "return": "", "example": ">>> # Start Word\n>>> word = Word()\n>>> word.append_text('This is sample text')\n>>> word.save_as('automagica_document.docx')\n", "snippet": "# Start Word\nword = Word()\nword.append_text('This is sample text')\nword.save_as('automagica_document.docx')\n", "keywords": ["word", "save", "document", "doc", "docx"], "icon": "lar la-file-word"}, {"function_call": "save_as(output_path)", "name": "Save As", "description": "Save active Word document to a specific location", "parameters": [{"name": " output_path", "description": " Enter a path to open Word with an existing Word file.\n"}], "return": "", "example": ">>> # Start Word\n>>> word = Word()\n>>> word.append_text('This is sample text')\n>>> word.save_as('document.odt')\n", "snippet": "# Start Word\nword = Word()\nword.append_text('This is sample text')\nword.save_as('document.odt')\n", "keywords": ["word", "save as", "document", "doc", "docx"], "icon": "lar la-file-word"}, {"function_call": "append_text(text)", "name": "Append text", "description": "Append text at end of Word document.", "parameters": [{"name": " text", "description": " Text to append to document\n"}], "return": "", "example": ">>> # Start Word\n>>> word = Word()\n>>> word.append_text('This is sample text')\n", "snippet": "# Start Word\nword = Word()\nword.append_text('This is sample text')\n", "keywords": ["word", "editor", "text", "text edit", "office", "document", "microsoft word", "doc", "docx"], "icon": "lar la-file-word"}, {"function_call": "replace_text(placeholder_text, replacement_text)", "name": "Replace text", "description": "Can be used for example to replace arbitrary placeholder value. For example whenusing template document, using 'XXXX' as a placeholder. Take note that all strings are case sensitive.", "parameters": [{"name": " placeholder_text", "description": " Placeholder text value in the document, this will be replaced, e.g. 'Company Name'\n"}, {"name": " replacement_text", "description": " Text to replace the placeholder values with. It is recommended to make this unique to avoid wrongful replacement, e.g. 'XXXX_placeholder_XXX'\n"}], "return": "", "example": ">>> # Start Word\n>>> word = Word()\n>>> word.append_text('This is sample text')\n>>> word.replace_text('sample', 'real')\n", "snippet": "# Start Word\nword = Word()\nword.append_text('This is sample text')\nword.replace_text('sample', 'real')\n", "keywords": ["word", "replace", "text", "template", "doc", "docx"], "icon": "lar la-file-word"}, {"function_call": "read_all_text(return_as_list=False)", "name": "Read all text", "description": "Read all the text from a document", "parameters": [{"name": " return_as_list", "description": " Set this paramater to True to return text as a list of strings. Default value is False.\n"}], "return": " Text from the document\n", "example": ">>> # Start Word\n>>> word = Word()\n>>> word.append_text('This is sample text')\n>>> word.replace_text('sample', 'real')\n>>> word.read_all_text()\n'This is real text'\n", "snippet": "# Start Word\nword = Word()\nword.append_text('This is sample text')\nword.replace_text('sample', 'real')\nword.read_all_text()\n", "keywords": ["word", "extract", "text", "document", "doc", "docx"], "icon": "lar la-file-word"}, {"function_call": "export_to_pdf(output_path=None)", "name": "Export to PDF", "description": "Export the document to PDF", "parameters": [{"name": " output_path", "description": " Output path where PDF file will be exported to. Default path is home directory with filename 'pdf_export.pdf'.\n"}], "return": "", "example": ">>> # Start Word\n>>> word = Word()\n>>> word.append_text('This is sample text')\n>>> word.replace_text('sample', 'real')\n>>> word.export_to_pdf('output.pdf')\n", "snippet": "# Start Word\nword = Word()\nword.append_text('This is sample text')\nword.replace_text('sample', 'real')\nword.export_to_pdf('output.pdf')\n", "keywords": ["word", "pdf", "document", "export", "save as", "doc", "docx"], "icon": "lar la-file-pdf"}, {"function_call": "export_to_html(output_path=None)", "name": "Export to HTML", "description": "Export to HTML", "parameters": [{"name": " file_path", "description": " Output path where HTML file will be exported to. Default path is home directory with filename 'html_export.html'.\n"}], "return": "", "example": ">>> # Start Word\n>>> word = Word()\n>>> word.append_text('This is sample text')\n>>> word.replace_text('sample', 'real')\n>>> word.export_to_html('output.html')\n", "snippet": "# Start Word\nword = Word()\nword.append_text('This is sample text')\nword.replace_text('sample', 'real')\nword.export_to_html('output.html')\n", "keywords": ["word", "html", "document", "export", "save as", "doc", "docx"], "icon": "las la-html5"}, {"function_call": "set_footers(text)", "name": "Set footers", "description": "Set the footers of the document", "parameters": [{"name": " text", "description": " Text to put in the footer\n"}], "return": "", "example": ">>> # Start Word\n>>> word = Word()\n>>> word.set_footers('This is a footer!')\n", "snippet": "# Start Word\nword = Word()\nword.set_footers('This is a footer!')\n", "keywords": ["word", "footer", "footers", "doc", "docx"], "icon": "las la-heading"}, {"function_call": "set_headers(text)", "name": "Set headers", "description": "Set the headers of the document", "parameters": [{"name": " text", "description": " Text to put in the header\n"}], "return": "", "example": ">>> # Start Word\n>>> word = Word()\n>>> word.set_headers('This is a header!')\n", "snippet": "# Start Word\nword = Word()\nword.set_headers('This is a header!')\n", "keywords": ["word", "header", "headers", "doc", "docx"], "icon": "las la-subscript"}, {"function_call": "quit(self)", "name": "Quit Word", "description": "This closes Word, make sure to use 'save' or 'save_as' if you would like to save before quitting.", "parameters": [], "return": "", "example": ">>> # Open Word  \n>>> word = Word()\n>>> # Quit Word\n>>> word.quit()\n", "snippet": "# Open Word  \nword = Word()\n# Quit Word\nword.quit()\n", "keywords": ["word", "wordfile", "doc quit", "close", "doc", "docx"], "icon": "la-file-word"}]}, {"name": "Word File", "icon": "las la-file-word", "activities": [{"function_call": "WordFile(file_path=None)", "name": "Read and Write Word files", "description": "These activities can read, write and edit Word (docx) files without the need of having Word installed.Note that, in contrary to working with the :func: 'Word' activities, a file get saved directly after manipulation.", "parameters": [{"name": " file_path", "description": " Enter a path to open Word with an existing Word file. If no path is specified a 'document.docx' will be initialized in the home directory, this is the default value. If a document with the same name already exists the file will be overwritten.\n"}], "return": "", "example": ">>> wordfile = WordFile()\n>>> wordfile.append_text('Some sample text')\n>>> wordfile.read_all_text()\n'Some sample text'\n", "snippet": "wordfile = WordFile()\nwordfile.append_text('Some sample text')\nwordfile.read_all_text()\n", "keywords": ["word", "read", "text", "file"], "icon": "las la-file-word"}, {"function_call": "read_all_text(return_as_list=False)", "name": "Read all text", "description": "Read all the text from the document", "parameters": [{"name": " return_as_list", "description": " Set this paramater to True to return text as a list of strings. Default value is False.\n"}], "return": " Text of the document\n", "example": ">>> wordfile = WordFile()\n>>> wordfile.append_text('Some sample text')\n>>> wordfile.read_all_text()\n'Some sample text'\n", "snippet": "wordfile = WordFile()\nwordfile.append_text('Some sample text')\nwordfile.read_all_text()\n", "keywords": ["word", "read", "text", "file"], "icon": "las la-file-word"}, {"function_call": "append_text(text, auto_save=True)", "name": "Append text", "description": "Append text at the end of the document", "parameters": [{"name": " text", "description": " Text to append\n"}, {"name": " auto_save", "description": " Save document after performing activity. Default value is True\n"}], "return": "", "example": ">>> wordfile = WordFile()\n>>> wordfile.append_text('Some sample text')\n", "snippet": "wordfile = WordFile()\nwordfile.append_text('Some sample text')\n", "keywords": ["word", "append text", "add text"], "icon": "las la-file-word"}, {"function_call": "save(self)", "name": "Save", "description": "Save document", "parameters": [], "return": "", "example": ">>> wordfile = WordFile()\n>>> wordfile.append_text('Some sample text')\n>>> wordfile.save()\n", "snippet": "wordfile = WordFile()\nwordfile.append_text('Some sample text')\nwordfile.save()\n", "keywords": ["word", "save", "store"], "icon": "las la-file-word"}, {"function_call": "save_as(output_path)", "name": "Save as", "description": "Save file on specified path", "parameters": [], "return": "", "example": ">>> wordfile = WordFile()\n>>> wordfile.append_text('Some sample text')\n>>> wordfile.save_as('document.docx')\n", "snippet": "wordfile = WordFile()\nwordfile.append_text('Some sample text')\nwordfile.save_as('document.docx')\n", "keywords": ["word", "save as", "store"], "icon": "las la-file-word"}, {"function_call": "set_headers(text, auto_save=True)", "name": "Set headers", "description": "Set headers of Word document", "parameters": [{"name": " text", "description": " Text to put in the header\n"}, {"name": " auto_save", "description": " Save document after performing activity. Default value is True\n"}], "return": "", "example": ">>> wordfile = WordFile()\n>>> wordfile.append_text('Some sample text')\n>>> wordfile.set_headers('This is a header')\n", "snippet": "wordfile = WordFile()\nwordfile.append_text('Some sample text')\nwordfile.set_headers('This is a header')\n", "keywords": ["word", "header text"], "icon": "las la-file-word"}, {"function_call": "replace_text(placeholder_text, replacement_text, auto_save=True)", "name": "Replace all", "description": "Replaces all occurences of a placeholder text in the document with a replacement text.", "parameters": [{"name": " placeholder_text", "description": " Placeholder text value (string) in the document, this will be replaced, e.g. 'Company Name'\n"}, {"name": " replacement_text", "description": " Text (string) to replace the placeholder values with. It is recommended to make this unique to avoid wrongful replacement, e.g. 'XXXX_placeholder_XXX'\n"}, {"name": " auto_save", "description": " Save document after performing activity. Default value is True\n"}], "return": "", "example": ">>> wordfile = WordFile()\n>>> wordfile.append_text('Some sample text')\n>>> wordfile.replace_text('sample', 'real')\n", "snippet": "wordfile = WordFile()\nwordfile.append_text('Some sample text')\nwordfile.replace_text('sample', 'real')\n", "keywords": ["word", "replace text", "template"], "icon": "las la-file-word"}]}, {"name": "Outlook Application", "icon": "las la-envelope", "activities": [{"function_call": "Outlook(account_name=None)", "name": "Start Outlook Application", "description": "For this activity to work, Outlook needs to be installed on the system.", "parameters": [{"name": " account_name", "description": " Name of the account\n"}], "return": " Application object (win32com.client)\n", "example": ">>> outlook = Outlook()\n", "snippet": "outlook = Outlook()\n", "keywords": ["outlook", "send e-mail", "send mail"], "icon": "las la-mail-bulk"}, {"function_call": "send_mail(self,to_address,subject=\"\",body=\"\",html_body=None,attachment_paths=None)", "name": "Send e-mail", "description": "Send an e-mail using Outlook", "parameters": [{"name": " to_address", "description": " The e-mail address the e-mail should be sent to\n"}, {"name": " subject", "description": " The subject of the e-mail\n"}, {"name": " body", "description": " The text body contents of the e-mail\n"}, {"name": " html_body", "description": " The HTML body contents of the e-mail (optional)\n"}, {"name": " attachment_paths", "description": " List of file paths to attachments\n"}], "return": "", "example": ">>> outlook = Outlook()\n>>> outlook.send_mail('test@test.com', subject='Hello world', body='Hi there')\n", "snippet": "outlook = Outlook()\noutlook.send_mail('test@test.com', subject='Hello world', body='Hi there')\n", "keywords": ["outlook", "send e-mail", "send mail"], "icon": "las la-mail-bulk"}, {"function_call": "get_folders(limit=999)", "name": "Retrieve folders", "description": "Retrieve list of folders from Outlook", "parameters": [{"name": " limit", "description": " Maximum number of folders to retrieve\n"}], "return": "", "example": ">>> outlook = Outlook()\n>>> outlook.get_folders()\n['Inbox', 'Sent', ...]\n", "snippet": "outlook = Outlook()\noutlook.get_folders()\n", "keywords": ["outlook", "get folders", "list folders"], "icon": "las la-mail-bulk"}, {"function_call": "get_mails(folder_name=\"Inbox\", fields=None)", "name": "Retrieve e-mails", "description": "Retrieve list of messages from Outlook", "parameters": [{"name": " folder_name", "description": " Name of the Outlook folder, can be found using `get_folders`.\n"}, {"name": " limit", "description": " Number of messages to retrieve\n"}, {"name": " fields", "description": " Fields (properties) of e-mail messages to give, requires tupl Stadard is 'Subject', 'Body', 'SentOn' and 'SenderEmailAddress'.\n"}], "return": " List of dictionaries containing the e-mail messages with from, to, subject, body and html.\n", "example": ">>> outlook = Outlook()\n>>> outlook.get_mails()\n", "snippet": "outlook = Outlook()\noutlook.get_mails()\n", "keywords": ["outlook", "retrieve e-mail", "receive e-mails", "process e-mails", "get mails"], "icon": "las la-mail-bulk"}, {"function_call": "delete_mails(self,folder_name=\"Inbox\",limit=0,subject_contains=\"\",body_contains=\"\",sender_contains=\"\")", "name": "Delete e-mails", "description": "Deletes e-mail messages in a certain folder. Can be specified by searching on subject, body or sender e-mail.", "parameters": [{"name": " folder_name", "description": " Name of the Outlook folder, can be found using `get_folders`\n"}, {"name": " limit", "description": " Maximum number of e-mails to delete in one go\n"}, {"name": " subject_contains", "description": " Only delete e-mail if subject contains this\n"}, {"name": " body_contains", "description": " Only delete e-mail if body contains this\n"}, {"name": " sender_contains", "description": " Only delete e-mail if sender contains this\n"}], "return": "", "example": ">>> outlook = Outlook()\n>>> outlook.delete_mails(subject_contains='hello')\n", "snippet": "outlook = Outlook()\noutlook.delete_mails(subject_contains='hello')\n", "keywords": ["outlook", "remove e-mails", "delete mail", "remove mail"], "icon": "las la-mail-bulk"}, {"function_call": "move_mails(self,source_folder_name=\"Inbox\",target_folder_name=\"Archive\",limit=0,subject_contains=\"\",body_contains=\"\",sender_contains=\"\")", "name": "Move e-mails", "description": "Move e-mail messages in a certain folder. Can be specified by searching on subject, body or sender e-mail.", "parameters": [{"name": " source_folder_name", "description": " Name of the Outlook source folder from where e-mails will be moved, can be found using `get_folders`\n"}, {"name": " target_folder_name", "description": " Name of the Outlook destination folder to where e-mails will be moved, can be found using `get_folders`\n"}, {"name": " limit", "description": " Maximum number of e-mails to move in one go\n"}, {"name": " subject_contains", "description": " Only move e-mail if subject contains this\n"}, {"name": " body_contains", "description": " Only move e-mail if body contains this\n"}, {"name": " sender_contains", "description": " Only move e-mail if sender contains this\n"}], "return": "", "example": ">>> outlook = Outlook()\n>>> outlook.move_mails(subject_contains='move me')\n", "snippet": "outlook = Outlook()\noutlook.move_mails(subject_contains='move me')\n", "keywords": ["outlook", "move e-mail", "move e-mail to folder"], "icon": "las la-mail-bulk"}, {"function_call": "save_attachments(folder_name=\"Inbox\", output_path=None)", "name": "Save attachments", "description": "Save all attachments from certain folder", "parameters": [{"name": " folder_name", "description": " Name of the Outlook folder, can be found using `get_folders`.\n"}, {"name": " output_path", "description": " Path where attachments will be saved. Default is the home directory.\n"}], "return": " List of paths to saved attachments.\n", "example": ">>> outlook = Outlook()\n>>> outlook.save_attachments()\n['Attachment.pdf', 'Signature_image.jpeg']\n", "snippet": "outlook = Outlook()\noutlook.save_attachments()\n", "keywords": ["outlook", "save attachments", "download attachments", "extract attachments"], "icon": "las la-mail-bulk"}, {"function_call": "get_contacts(fields=None)", "name": "Retrieve contacts", "description": "Retrieve all contacts", "parameters": [{"name": " fields", "description": " Fields can be specified as a tuple with their exact names. Standard value is None returning \"LastName\", \"FirstName\" and \"Email1Address\".\n"}], "return": " List of dictionaries containing the contact details.\n", "example": ">>> outlook = Outlook()\n>>> outlook.get_contacts()\n[\n    {\n        'LastName': 'Doe',\n        'FirstName' : 'John',\n        'Email1Address': 'john@test.com'\n    }\n]\n", "snippet": "outlook = Outlook()\noutlook.get_contacts()\n    {\n        'LastName': 'Doe',\n        'FirstName' : 'John',\n        'Email1Address': 'john@test.com'\n    }\n", "keywords": ["outlook", "get contacts", "download contacts", "rolodex"], "icon": "las la-mail-bulk"}, {"function_call": "add_contact(email, first_name=\"\", last_name=\"\")", "name": "Add a contact", "description": "Add a contact to Outlook contacts", "parameters": [{"name": " email", "description": " The e-mail address for the contact\n"}, {"name": " first_name", "description": " First name for the contact (optional)\n"}, {"name": " last_name", "description": " Last name for the contact (optional)\n"}], "return": "", "example": ">>> outlook = Outlook()\n>>> outlook.add_contact('sales@automagica.com')\n", "snippet": "outlook = Outlook()\noutlook.add_contact('sales@automagica.com')\n", "keywords": ["outlook", "create contact", "add contact"], "icon": "las la-mail-bulk"}, {"function_call": "quit(self)", "name": "Quit", "description": "Close the Outlook application", "parameters": [], "return": "", "example": ">>> outlook = Outlook()\n>>> outlook.quit()\n", "snippet": "outlook = Outlook()\noutlook.quit()\n", "keywords": ["outlook", "close", "quit"], "icon": "las la-mail-bulk"}]}, {"name": "Excel Application", "icon": "las la-file-excel", "activities": [{"function_call": "Excel(file_path=None, visible=True)", "name": "Start Excel Application", "description": "For this activity to work, Microsoft Office Excel needs to be installed on the system.", "parameters": [{"name": " file_path", "description": " Enter a path to open Excel with an existing Excel file. If no path is specified a workbook will be initialized, this is the default value.\n"}, {"name": " visible", "description": " Show Excel in the foreground if True or hide if False, defaults to True.\n"}], "return": " Application object (win32com.client)\n", "example": ">>> # Open Excel\n>>> excel = Excel()\n", "snippet": "# Open Excel\nexcel = Excel()\n", "keywords": ["excel", "add worksheet", "add tab"], "icon": "las la-file-excel"}, {"function_call": "add_worksheet(name=None)", "name": "Add worksheet", "description": "Adds a worksheet to the current workbook", "parameters": [], "return": "", "example": ">>> # Open Excel\n>>> excel = Excel()\n>>> # Add a worksheet\n>>> excel.add_worksheet('My Example Worksheet')\n", "snippet": "# Open Excel\nexcel = Excel()\n# Add a worksheet\nexcel.add_worksheet('My Example Worksheet')\n", "keywords": ["excel", "add worksheet", "add tab", "insert worksheet", "new worksheet"], "icon": "las la-file-excel"}, {"function_call": "activate_worksheet(name)", "name": "Activate worksheet", "description": "Activate a worksheet in the current Excel document by name", "parameters": [{"name": " name", "description": " Name of the worksheet to activate\n"}], "return": "", "example": ">>> # Open Excel   \n>>> excel = Excel()\n>>> # Add the first worksheet\n>>> excel.add_worksheet('My Example Worksheet')\n>>> # Add another worksheet\n>>> excel.add_worksheet('Another Worksheet')\n>>> # Activate the first worksheet\n>>> excel.activate_worksheet('My Example Worksheet)\n", "snippet": "# Open Excel   \nexcel = Excel()\n# Add the first worksheet\nexcel.add_worksheet('My Example Worksheet')\n# Add another worksheet\nexcel.add_worksheet('Another Worksheet')\n# Activate the first worksheet\nexcel.activate_worksheet('My Example Worksheet)\n", "keywords": ["excel", "activate worksheet", "set worksheet", "select worksheet", "select tab", "activate tab"], "icon": "las la-file-excel"}, {"function_call": "save(self)", "name": "Save", "description": "Save the current workbook. Defaults to homedir", "parameters": [], "return": "", "example": ">>> # Open Excel\n>>> excel = Excel()\n>>> # Add the first worksheet\n>>> excel.add_worksheet('My Example Worksheet')\n>>> # Save the workbook\n>>> excel.save()\n", "snippet": "# Open Excel\nexcel = Excel()\n# Add the first worksheet\nexcel.add_worksheet('My Example Worksheet')\n# Save the workbook\nexcel.save()\n", "keywords": ["excel", "save", "store"], "icon": "las la-file-excel"}, {"function_call": "save_as(output_path)", "name": "Save as", "description": "Save the current workbook to a specific path", "parameters": [{"name": " output_path", "description": " Path where workbook will be saved.\n"}], "return": "", "example": ">>> # Open Excel\n>>> excel = Excel()\n>>> # Add the first worksheet\n>>> excel.add_worksheet('My Example Worksheet')\n>>> # Save the workbook to the current working directory\n>>> excel.save_as('output.xlsx')\n", "snippet": "# Open Excel\nexcel = Excel()\n# Add the first worksheet\nexcel.add_worksheet('My Example Worksheet')\n# Save the workbook to the current working directory\nexcel.save_as('output.xlsx')\n", "keywords": ["excel", "save as", "export"], "icon": "las la-file-excel"}, {"function_call": "write_cell(column, row, value)", "name": "Write cell", "description": "Write to a specific cell in the currently active workbook and active worksheet", "parameters": [{"name": " column", "description": " Column number (integer) to write\n"}, {"name": " row", "description": " Row number (integer) to write\n"}, {"name": " value", "description": " Value to write to specific cell\n"}], "return": "", "example": ">>> # Open Excel\n>>> excel = Excel()\n>>> # Add the first worksheet\n>>> excel.add_worksheet('My Example Worksheet')\n>>> # Insert a text into the first cell\n>>> excel.write_cell(1,1, 'Hello World!')\n", "snippet": "# Open Excel\nexcel = Excel()\n# Add the first worksheet\nexcel.add_worksheet('My Example Worksheet')\n# Insert a text into the first cell\nexcel.write_cell(1,1, 'Hello World!')\n", "keywords": ["excel", "cell", "insert cell", "insert data"], "icon": "las la-file-excel"}, {"function_call": "read_cell(column, row)", "name": "Read cell", "description": "Read a cell from the currently active workbook and active worksheet", "parameters": [{"name": " column", "description": " Column number (integer) to read\n"}, {"name": " row", "description": " Row number (integer) to read\n"}], "return": " Cell value\n", "example": ">>> # Open Excel\n>>> excel = Excel()\n>>> # Add the first worksheet\n>>> excel.add_worksheet('My Example Worksheet')\n>>> # Insert a text into the first cell\n>>> excel.write_cell(1,1, 'Hello World!')\n>>> excel.read_cell(1,1)\n'Hello World!'\n", "snippet": "# Open Excel\nexcel = Excel()\n# Add the first worksheet\nexcel.add_worksheet('My Example Worksheet')\n# Insert a text into the first cell\nexcel.write_cell(1,1, 'Hello World!')\nexcel.read_cell(1,1)\n", "keywords": ["excel", "cell", "read cell", "read data"], "icon": "las la-file-excel"}, {"function_call": "write_range(range_, value)", "name": "Write range", "description": "Write to a specific range in the currently active worksheet in the active workbook", "parameters": [{"name": " range_", "description": " Range to write to, e.g. \"A1:D10\"\n"}, {"name": " value", "description": " Value to write to range\n"}], "return": "", "example": ">>> # Open Excel\n>>> excel = Excel()\n>>> # Add the first worksheet\n>>> excel.add_worksheet('My Example Worksheet')\n>>> # Insert a text in every cell in this range\n>>> excel.write_range('A1:D5', 'Hello World!')\n", "snippet": "# Open Excel\nexcel = Excel()\n# Add the first worksheet\nexcel.add_worksheet('My Example Worksheet')\n# Insert a text in every cell in this range\nexcel.write_range('A1:D5', 'Hello World!')\n", "keywords": ["excel", "cell", "write range", "read data"], "icon": "las la-file-excel"}, {"function_call": "read_range(range_)", "name": "Read range", "description": "Read a range of cells from the currently active worksheet in the active workbook", "parameters": [{"name": " range_", "description": " Range to read from, e.g. \"A1:D10\"\n"}], "return": "", "example": ">>> # Open Excel\n>>> excel = Excel()\n>>> # Add the first worksheet\n>>> excel.add_worksheet('My Example Worksheet')\n>>> # Insert a text in every cell in this range\n>>> excel.write_range('A1:D5', 'Hello World!')\n>>> # Read the same range\n>>> excel.read_range('A1:D5')\n[['Hello World', 'Hello World', 'Hello World', 'Hello World'], ...]\n", "snippet": "# Open Excel\nexcel = Excel()\n# Add the first worksheet\nexcel.add_worksheet('My Example Worksheet')\n# Insert a text in every cell in this range\nexcel.write_range('A1:D5', 'Hello World!')\n# Read the same range\nexcel.read_range('A1:D5')\n", "keywords": ["excel", "cell", "read range", "read data"], "icon": "las la-file-excel"}, {"function_call": "run_macro(name)", "name": "Run macro", "description": "Run a macro by name from the currently active workbook", "parameters": [{"name": " name", "description": " Name of the macro to run. \n"}], "return": "", "example": ">>> excel = Excel('excel_with_macro.xlsx')\n>>> # Run the macro\n>>> excel.run_macro('Macro1')\n", "snippet": "excel = Excel('excel_with_macro.xlsx')\n# Run the macro\nexcel.run_macro('Macro1')\n", "keywords": ["excel", "run macro", "run vba"], "icon": "las la-file-excel"}, {"function_call": "get_worksheet_names(self)", "name": "Get worksheet names", "description": "Get names of all the worksheets in the currently active workbook", "parameters": [], "return": " List of worksheet names\n", "example": ">>> # Open Excel\n>>> excel = Excel()\n>>> # Add a worksheet\n>>> excel.add_worksheet('My Example Worksheet')\n>>> # Get all worksheet names\n>>> excel.get_worksheet_names()\n['Sheet1', 'My Example Worksheet']\n", "snippet": "# Open Excel\nexcel = Excel()\n# Add a worksheet\nexcel.add_worksheet('My Example Worksheet')\n# Get all worksheet names\nexcel.get_worksheet_names()\n", "keywords": ["excel", "worksheet names", "tab names"], "icon": "las la-file-excel"}, {"function_call": "get_table(name)", "name": "Get table", "description": "Get table data from the currently active worksheet by name of the table", "parameters": [{"name": " name", "description": " Table name\n"}], "return": " List of dictionaries for each row with as key the column name\n", "example": ">>> # Open Excel\n>>> excel = Excel()\n>>> # Create a table (Table1)\n>>> data = [\n    {\n        'Column A': 'Data Row 1 for A',\n        'Column B': 'Data Row 1 for B',\n        'Column C': 'Data Row 1 for C',\n    },\n    {\n        'Column A': 'Data Row 2 for A',\n        'Column B': 'Data Row 2 for B',\n        'Column C': 'Data Row 2 for C',\n    }]\n>>> excel.insert_data_as_table(data)\n>>> # Get the table\n>>> excel.get_table('Table1')\n[['Column A', 'Column B', 'Column C'], ['Row 1 A Data', 'Row 1 B Data', 'Row 1 C Data'], ...]\n", "snippet": "# Open Excel\nexcel = Excel()\n# Create a table (Table1)\ndata = [\n    {\n        'Column A': 'Data Row 1 for A',\n        'Column B': 'Data Row 1 for B',\n        'Column C': 'Data Row 1 for C',\n    },\n    {\n        'Column A': 'Data Row 2 for A',\n        'Column B': 'Data Row 2 for B',\n        'Column C': 'Data Row 2 for C',\n    }]\nexcel.insert_data_as_table(data)\n# Get the table\nexcel.get_table('Table1')\n", "keywords": ["excel", "worksheet names", "tab names"], "icon": "las la-file-excel"}, {"function_call": "activate_range(range_)", "name": "Activate range", "description": "Activate a particular range in the currently active workbook", "parameters": [{"name": " range_", "description": " Range to activate, e.g. \"A1:D10\"\n"}], "return": "", "example": ">>> # Open Excel\n>>> excel = Excel()\n>>> # Activate a cell range\n>>> excel.activate_range('A1:D5')\n", "snippet": "# Open Excel\nexcel = Excel()\n# Activate a cell range\nexcel.activate_range('A1:D5')\n", "keywords": ["excel", "activate range", "make selection", "select cells", "select range"], "icon": "las la-file-excel"}, {"function_call": "activate_first_empty_cell_down(self)", "name": "Activate first empty cell down", "description": "Activates the first empty cell going down", "parameters": [], "return": "", "example": ">>> # Open Excel\n>>> excel = Excel()\n>>> # Write some cells\n>>> excel.write_cell(1, 1, 'Filled')\n>>> excel.write_cell(1, 2, 'Filled')\n>>> excel.write_cell(1, 3, 'Filled')\n>>> # Activate the first empty cell going down, in this case cell A4 or (1,4)\n>>> excel.activate_first_empty_cell_down()\n", "snippet": "# Open Excel\nexcel = Excel()\n# Write some cells\nexcel.write_cell(1, 1, 'Filled')\nexcel.write_cell(1, 2, 'Filled')\nexcel.write_cell(1, 3, 'Filled')\n# Activate the first empty cell going down, in this case cell A4 or (1,4)\nexcel.activate_first_empty_cell_down()\n", "keywords": ["excel", "first empty cell", "down"], "icon": "las la-file-excel"}, {"function_call": "activate_first_empty_cell_right(self)", "name": "Activate first empty cell right", "description": "Activates the first empty cell going right", "parameters": [], "return": "", "example": ">>> # Open Excel\n>>> excel = Excel()\n>>> # Write some cells\n>>> excel.write_cell(1, 1, 'Filled')\n>>> excel.write_cell(1, 2, 'Filled')\n>>> excel.write_cell(1, 3, 'Filled')\n>>> # Activate the first empty cell going right, in this case cell B1 or (2,1)\n>>> excel.activate_first_empty_cell_right()\n", "snippet": "# Open Excel\nexcel = Excel()\n# Write some cells\nexcel.write_cell(1, 1, 'Filled')\nexcel.write_cell(1, 2, 'Filled')\nexcel.write_cell(1, 3, 'Filled')\n# Activate the first empty cell going right, in this case cell B1 or (2,1)\nexcel.activate_first_empty_cell_right()\n", "keywords": ["excel", "first empty cell", "right"], "icon": "las la-file-excel"}, {"function_call": "activate_first_empty_cell_left(self)", "name": "Activate first empty cell left", "description": "Activates the first empty cell going left", "parameters": [], "return": "", "example": ">>> # Open Excel\n>>> excel = Excel()\n>>> excel.write_cell(1, 1, 'Filled')\n>>> excel.write_cell(1, 2, 'Filled')\n>>> excel.write_cell(1, 3, 'Filled')\n>>> excel.activate_first_empty_cell_left()\n", "snippet": "# Open Excel\nexcel = Excel()\nexcel.write_cell(1, 1, 'Filled')\nexcel.write_cell(1, 2, 'Filled')\nexcel.write_cell(1, 3, 'Filled')\nexcel.activate_first_empty_cell_left()\n", "keywords": ["excel", "first empty cell", "left"], "icon": "las la-file-excel"}, {"function_call": "activate_first_empty_cell_up(self)", "name": "Activate first empty cell up", "description": "Activates the first empty cell going up", "parameters": [], "return": "", "example": ">>> # Open Excel\n>>> excel = Excel()\n>>> # Write some cells\n>>> excel.write_cell(1, 1, 'Filled')\n>>> excel.write_cell(1, 2, 'Filled')\n>>> excel.write_cell(1, 3, 'Filled')\n>>> # Activate first empty cell\n>>> excel.activate_first_empty_cell_up()\n", "snippet": "# Open Excel\nexcel = Excel()\n# Write some cells\nexcel.write_cell(1, 1, 'Filled')\nexcel.write_cell(1, 2, 'Filled')\nexcel.write_cell(1, 3, 'Filled')\n# Activate first empty cell\nexcel.activate_first_empty_cell_up()\n", "keywords": ["excel", "first empty cell", "up"], "icon": "las la-file-excel"}, {"function_call": "write_cell_formula(column, row, formula)", "name": "Write cell formula", "description": "Write a formula to a particular cell", "parameters": [{"name": " column", "description": " Column number to write formula\n"}, {"name": " row", "description": " Row number to write formula\n"}, {"name": " value", "description": " Formula to write to specific cell e.g. \"=10*RAND()\"\n"}], "return": "", "example": ">>> # Open Excel\n>>> excel = Excel()\n>>> # Write a formula to the first cell\n>>> excel.write_cell_formula(1, 1, '=1+1)\n", "snippet": "# Open Excel\nexcel = Excel()\n# Write a formula to the first cell\nexcel.write_cell_formula(1, 1, '=1+1)\n", "keywords": ["excel", "insert formula", "insert calculation", "insert calculated cell"], "icon": "las la-file-excel"}, {"function_call": "read_cell_formula(column, row)", "name": "Read cell formula", "description": "Read the formula from a particular cell", "parameters": [{"name": " column", "description": " Column number to read formula\n"}, {"name": " row", "description": " Row number to read formula\n"}], "return": " Cell value\n", "example": ">>> # Open Excel\n>>> excel = Excel()\n>>> # Write a formula to the first cell\n>>> excel.write_cell_formula(1, 1, '=1+1')\n>>> # Read the cell\n>>> excel.read_cell_formula(1, 1)\n'=1+1'\n", "snippet": "# Open Excel\nexcel = Excel()\n# Write a formula to the first cell\nexcel.write_cell_formula(1, 1, '=1+1')\n# Read the cell\nexcel.read_cell_formula(1, 1)\n", "keywords": ["excel", "read formula", "read calculation"], "icon": "las la-file-excel"}, {"function_call": "insert_empty_row(row)", "name": "Insert empty row", "description": "Inserts an empty row to the currently active worksheet", "parameters": [{"name": " row", "description": " Row number where to insert empty row e.g 1\n"}], "return": "", "example": ">>> # Open Excel              \n>>> excel = Excel()\n>>> excel.write_cell(1, 1, 'Filled')\n>>> excel.write_cell(1, 2, 'Filled')\n>>> excel.write_cell(1, 3, 'Filled')\n>>> excel.insert_empty_row(2)\n", "snippet": "# Open Excel              \nexcel = Excel()\nexcel.write_cell(1, 1, 'Filled')\nexcel.write_cell(1, 2, 'Filled')\nexcel.write_cell(1, 3, 'Filled')\nexcel.insert_empty_row(2)\n", "keywords": ["excel", "insert row", "add row", "empty row"], "icon": "las la-file-excel"}, {"function_call": "insert_empty_column(column)", "name": "Insert empty column", "description": "Inserts an empty column in the currently active worksheet. Existing columns will shift to the right.", "parameters": [{"name": " column", "description": " Column letter where to insert empty column e.g. 'A'\n"}], "return": "", "example": ">>> # Open Excel\n>>> excel = Excel()\n>>> excel.write_cell(1, 1, 'Filled')\n>>> excel.write_cell(2, 2, 'Filled')\n>>> excel.write_cell(3, 3, 'Filled')\n>>> excel.insert_empty_column('A')\n", "snippet": "# Open Excel\nexcel = Excel()\nexcel.write_cell(1, 1, 'Filled')\nexcel.write_cell(2, 2, 'Filled')\nexcel.write_cell(3, 3, 'Filled')\nexcel.insert_empty_column('A')\n", "keywords": ["excel", "insert column", "add column"], "icon": "las la-file-excel"}, {"function_call": "delete_row(row)", "name": "Delete row in Excel", "description": "Deletes a row from the currently active worksheet. Existing data will shift up.", "parameters": [{"name": " row", "description": " Row number (integer) where to delete row e.g 1\n"}], "return": "", "example": ">>> # Open Excel              \n>>> excel = Excel()\n>>> excel.write_cell(1, 1, 'Filled')\n>>> excel.write_cell(2, 2, 'Filled')\n>>> excel.write_cell(3, 3, 'Filled')\n>>> excel.delete_row(2)\n", "snippet": "# Open Excel              \nexcel = Excel()\nexcel.write_cell(1, 1, 'Filled')\nexcel.write_cell(2, 2, 'Filled')\nexcel.write_cell(3, 3, 'Filled')\nexcel.delete_row(2)\n", "keywords": ["excel", "delete row", "remove row"], "icon": "las la-file-excel"}, {"function_call": "delete_column(column)", "name": "Delete column", "description": "Delete a column from the currently active worksheet. Existing columns will shift to the left.", "parameters": [{"name": " column", "description": " Column letter (string) where to delete  column e.g. 'A'\n"}], "return": "", "example": ">>> # Open Excel              \n>>> excel = Excel()\n>>> excel.write_cell(1, 1, 'Filled')\n>>> excel.write_cell(2, 2, 'Filled')\n>>> excel.write_cell(3, 3, 'Filled')\n>>> excel.delete_column('A')\n", "snippet": "# Open Excel              \nexcel = Excel()\nexcel.write_cell(1, 1, 'Filled')\nexcel.write_cell(2, 2, 'Filled')\nexcel.write_cell(3, 3, 'Filled')\nexcel.delete_column('A')\n", "keywords": ["excel", "delete column", "remove column"], "icon": "las la-file-excel"}, {"function_call": "export_to_pdf(output_path=None)", "name": "Export to PDF", "description": "Export to PDF", "parameters": [{"name": " path", "description": " Output path where PDF file will be exported to. Default path is home directory with filename 'pdf_export.pdf'.\n"}], "return": "", "example": ">>> # Open Excel              \n>>> excel = Excel()\n>>> excel.write_cell(1, 1, 'Filled')\n>>> excel.write_cell(2, 2, 'Filled')\n>>> excel.write_cell(3, 3, 'Filled')\n>>> excel.export_to_pdf('output.pdf')\n", "snippet": "# Open Excel              \nexcel = Excel()\nexcel.write_cell(1, 1, 'Filled')\nexcel.write_cell(2, 2, 'Filled')\nexcel.write_cell(3, 3, 'Filled')\nexcel.export_to_pdf('output.pdf')\n", "keywords": ["excel", "save as pdf", "export to pdf", "export as pdf"], "icon": "las la-file-excel"}, {"function_call": "insert_data_as_table(data, range_=\"A1\", table_style=\"TableStyleMedium2\")", "name": "Insert data as table", "description": "Insert list of dictionaries as a table in Excel", "parameters": [{"name": " data", "description": " List of dictionaries to write as table\n"}, {"name": " range_", "description": " Range or startingpoint for table e.g. 'A1'\n"}], "return": "", "example": ">>> excel = Excel()\n>>> data = [\n    {\n        'Column A': 'Data Row 1 for A',\n        'Column B': 'Data Row 1 for B',\n        'Column C': 'Data Row 1 for C',\n    },\n    {\n        'Column A': 'Data Row 2 for A',\n        'Column B': 'Data Row 2 for B',\n        'Column C': 'Data Row 2 for C',\n    }\n>>> excel.insert_data_as_table(data)\n", "snippet": "excel = Excel()\ndata = [\n    {\n        'Column A': 'Data Row 1 for A',\n        'Column B': 'Data Row 1 for B',\n        'Column C': 'Data Row 1 for C',\n    },\n    {\n        'Column A': 'Data Row 2 for A',\n        'Column B': 'Data Row 2 for B',\n        'Column C': 'Data Row 2 for C',\n    }\nexcel.insert_data_as_table(data)\n", "keywords": ["excel", "insert data", "insert table", "create table"], "icon": "las la-file-excel"}, {"function_call": "read_worksheet(name=None, headers=False)", "name": "Read worksheet", "description": "Read data from a worksheet as a list of lists", "parameters": [{"name": " name", "description": " Optional name of worksheet to read. If no name is specified will take active sheet\n"}, {"name": " headers", "description": " Boolean to treat first row as headers. Default value is False\n"}], "return": " List of dictionaries with sheet data\n", "example": ">>> # Open excel    \n>>> excel = Excel()\n>>> Write some cells\n>>> excel.write_cell(1, 1, 'A')\n>>> excel.write_cell(1, 2, 'B')\n>>> excel.write_cell(1, 3, 'C')\n>>> excel.read_worksheet()\n[['A'],['B'],['C']]\n", "snippet": "# Open excel    \nexcel = Excel()\nWrite some cells\nexcel.write_cell(1, 1, 'A')\nexcel.write_cell(1, 2, 'B')\nexcel.write_cell(1, 3, 'C')\nexcel.read_worksheet()\n", "keywords": ["excel", "read worksheet", "export data", "read data"], "icon": "las la-file-excel"}, {"function_call": "quit(self)", "name": "Quit Excel", "description": "This closes Excel, make sure to use 'save' or 'save_as' if you would like to save before quitting.", "parameters": [], "return": "", "example": ">>> # Open Excel  \n>>> excel = Excel()\n>>> # Quit Excel\n>>> excel.quit()\n", "snippet": "# Open Excel  \nexcel = Excel()\n# Quit Excel\nexcel.quit()\n", "keywords": ["excel", "exit", "quit", "close"], "icon": "las la-file-excel"}]}, {"name": "Excel File", "icon": "las la-file-excel", "activities": [{"function_call": "ExcelFile(file_path=None)", "name": "Read and Write xlsx files.", "description": "This activity can read, write and edit Excel (xlsx) files without the need of having Excel installed.Note that, in contrary to working with the :func: 'Excel' activities, a file get saved directly after manipulation.", "parameters": [{"name": " file_path", "description": " Enter a path to open Excel with an existing Excel file. If no path is specified a 'workbook.xlsx' will be initialized in the home directory, this is the default value. If a workbook with the same name already exists the file will be overwritten.\n"}], "return": "", "example": ">>> # Open a new Excel file\n>>> excel_file = ExcelFile()\n", "snippet": "# Open a new Excel file\nexcel_file = ExcelFile()\n", "keywords": ["excel", "open", "start", "xlsx"], "icon": "las la-file-excel"}, {"function_call": "to_dataframe(self)", "name": "Export file to dataframe", "description": "Export to pandas dataframe", "parameters": [], "return": "", "example": ">>> # Open a new Excel file\n>>> excel_file = ExcelFile()\n>>> # Convert to Dataframe\n>>> df = excel_file.to_dataframe()\n", "snippet": "# Open a new Excel file\nexcel_file = ExcelFile()\n# Convert to Dataframe\ndf = excel_file.to_dataframe()\n", "keywords": ["excel", "open", "start", "xlsx", "dataframe,"], "icon": "las la-file-excel"}, {"function_call": "activate_worksheet(name)", "name": "Activate worksheet", "description": "Activate a worksheet. By default the first worksheet is activated.", "parameters": [{"name": " name", "description": " Name of the worksheet to activate.        \n"}], "return": "", "example": ">>> # Open a new Excel file\n>>> excel_file = ExcelFile()\n>>> # Add some worksheets\n>>> excel_file.add_worksheet('My Example Worksheet')\n>>> excel_file.add_worksheet('Another Worksheet')\n>>> # Activate a worksheet\n>>> excel_file.activate_worksheet('My Example Worksheet')\n", "snippet": "# Open a new Excel file\nexcel_file = ExcelFile()\n# Add some worksheets\nexcel_file.add_worksheet('My Example Worksheet')\nexcel_file.add_worksheet('Another Worksheet')\n# Activate a worksheet\nexcel_file.activate_worksheet('My Example Worksheet')\n", "keywords": ["excel", "activate tab", "activate worksheet"], "icon": "las la-file-excel"}, {"function_call": "save_as(output_path)", "name": "Save as", "description": "Save file as", "parameters": [{"name": " file_path", "description": " Path where workbook will be saved\n"}], "return": "", "example": ">>> # Open a new Excel file\n>>> excel_file = ExcelFile()\n>>> # Ad a worksheet\n>>> excel_file.add_worksheet('My Example Worksheet')\n>>> # Save the Excel file\n>>> excel_file.save_as('output.xlsx')\n", "snippet": "# Open a new Excel file\nexcel_file = ExcelFile()\n# Ad a worksheet\nexcel_file.add_worksheet('My Example Worksheet')\n# Save the Excel file\nexcel_file.save_as('output.xlsx')\n", "keywords": ["excel", "save as", "export", "save"], "icon": "las la-file-excel"}, {"function_call": "save(self)", "name": "Save as", "description": "Save file", "parameters": [], "return": "", "example": ">>> # Open a new Excel file\n>>> excel_file = ExcelFile()\n>>> # Ad a worksheet\n>>> excel_file.add_worksheet('My Example Worksheet')\n>>> # Save the Excel file\n>>> excel_file.save()\n", "snippet": "# Open a new Excel file\nexcel_file = ExcelFile()\n# Ad a worksheet\nexcel_file.add_worksheet('My Example Worksheet')\n# Save the Excel file\nexcel_file.save()\n", "keywords": ["excel", "save as", "export", "save"], "icon": "las la-file-excel"}, {"function_call": "write_cell(column, row, value, auto_save=True)", "name": "Write cell", "description": "Write a cell based on column and row", "parameters": [{"name": " column", "description": " Column number (integer) to write\n"}, {"name": " row", "description": " Row number (integer) to write\n"}, {"name": " value", "description": " Value to write to specific cell\n"}, {"name": " auto_save", "description": " Save document after performing activity. Default value is True\n"}], "return": "", "example": ">>> # Open a new Excel file\n>>> excel_file = ExcelFile()\n>>> # Add a worksheet\n>>> excel_file.add_worksheet('My Example Worksheet')\n>>> excel_file.write_cell(1, 1, 'Filled!')\n", "snippet": "# Open a new Excel file\nexcel_file = ExcelFile()\n# Add a worksheet\nexcel_file.add_worksheet('My Example Worksheet')\nexcel_file.write_cell(1, 1, 'Filled!')\n", "keywords": ["excel", "write cell", "insert data"], "icon": "las la-file-excel"}, {"function_call": "read_cell(column, row)", "name": "Read cell", "description": "Read a cell based on column and row", "parameters": [{"name": " column", "description": " Column number (integer) to read\n"}, {"name": " row", "description": " Row number (integer) to read\n"}], "return": " Cell value\n", "example": ">>> # Open a new Excel file\n>>> excel_file = ExcelFile()\n>>> # Add a worksheet\n>>> excel_file.add_worksheet('My Example Worksheet')\n>>> # Write the first cell\n>>> excel_file.write_cell(1, 1, 'Filled!')\n>>> # Read the first cell\n>>> excel_file.read_cell(1, 1)\n'Filled!'\n", "snippet": "# Open a new Excel file\nexcel_file = ExcelFile()\n# Add a worksheet\nexcel_file.add_worksheet('My Example Worksheet')\n# Write the first cell\nexcel_file.write_cell(1, 1, 'Filled!')\n# Read the first cell\nexcel_file.read_cell(1, 1)\n", "keywords": ["excel", "read cell", "read"], "icon": "las la-file-excel"}, {"function_call": "add_worksheet(name, auto_save=True)", "name": "Add worksheet", "description": "Add a worksheet", "parameters": [{"name": " name", "description": " Name of the worksheet to add\n"}, {"name": " auto_save", "description": " Save document after performing activity. Default value is True\n"}], "return": "", "example": ">>> # Open a new Excel file\n>>> excel_file = ExcelFile()\n>>> # Add a worksheet\n>>> excel_file.add_worksheet('My Example Worksheet')\n>>> # List all the worksheets\n>>> excel.get_worksheet_names()\n", "snippet": "# Open a new Excel file\nexcel_file = ExcelFile()\n# Add a worksheet\nexcel_file.add_worksheet('My Example Worksheet')\n# List all the worksheets\nexcel.get_worksheet_names()\n", "keywords": ["excel", "add worksheet", "worksheet"], "icon": "las la-file-excel"}, {"function_call": "get_worksheet_names(self)", "name": "Get worksheet names", "description": "Get worksheet names", "parameters": [], "return": " List of worksheet names\n", "example": ">>> # Open a new Excel file\n>>> excel_file = ExcelFile()\n>>> # Add some worksheets\n>>> excel_file.add_worksheet('My Example Worksheet')\n>>> excel_file.add_worksheet('Another Worksheet')\n>>> # Get the worksheet names\n>>> excel_file.get_worksheet_names()\n['My Example Worksheet', 'Another Worksheet']\n", "snippet": "# Open a new Excel file\nexcel_file = ExcelFile()\n# Add some worksheets\nexcel_file.add_worksheet('My Example Worksheet')\nexcel_file.add_worksheet('Another Worksheet')\n# Get the worksheet names\nexcel_file.get_worksheet_names()\n", "keywords": ["excel", "worksheet names", "worksheet,"], "icon": "las la-file-excel"}]}, {"name": "PowerPoint Application", "icon": "las la-file-powerpoint", "activities": [{"function_call": "PowerPoint(file_path=None, visible=True, add_slide=True)", "name": "Start PowerPoint Application", "description": "For this activity to work, PowerPoint needs to be installed on the system.", "parameters": [{"name": " file_path", "description": " Enter a path to open an existing PowerPoint presentation. If no path is specified a new presentation will be initialized, this is the default value.\n"}, {"name": " visible", "description": " Show PowerPoint in the foreground if True or hide if False, defaults to True.\n"}, {"name": " add_slide", "description": " Add an initial empty slide when creating new PowerPointfile, this prevents errors since most manipulations require a non-empty presentation. Default value is True\n"}], "return": " Application object (win32com.client)\n", "example": ">>> # Start PowerPoint\n>>> powerpoint = PowerPoint()\n", "snippet": "# Start PowerPoint\npowerpoint = PowerPoint()\n", "keywords": ["powerpoint", "ppt"], "icon": "las la-file-powerpoint"}, {"function_call": "save_as(output_path)", "name": "Save PowerPoint", "description": "Save PowerPoint Slidedeck", "parameters": [{"name": " file_path", "description": " Save the PowerPoint presentation.\n"}], "return": "", "example": ">>> # Start PowerPoint\n>>> powerpoint = PowerPoint()\n>>> # Add a first slide\n>>> powerpoint.add_slide()\n>>> # Save the PowerPoint presentation\n>>> powerpoint.save_as('AmazingPresentation.pptx')\n", "snippet": "# Start PowerPoint\npowerpoint = PowerPoint()\n# Add a first slide\npowerpoint.add_slide()\n# Save the PowerPoint presentation\npowerpoint.save_as('AmazingPresentation.pptx')\n", "keywords": ["powerpoint", "ppt", "save", "save as", "save powerpoint"], "icon": "las la-file-powerpoint"}, {"function_call": "save(self)", "name": "Save PowerPoint", "description": "Save PowerPoint Slidedeck", "parameters": [], "return": "", "example": ">>> # Start PowerPoint\n>>> powerpoint = PowerPoint()\n>>> # Add a first slide\n>>> powerpoint.add_slide()\n>>> # Save the PowerPoint presentation\n>>> powerpoint.save_as('AmazingPresentation.pptx')\n", "snippet": "# Start PowerPoint\npowerpoint = PowerPoint()\n# Add a first slide\npowerpoint.add_slide()\n# Save the PowerPoint presentation\npowerpoint.save_as('AmazingPresentation.pptx')\n", "keywords": ["powerpoint", "ppt", "save", "save as", "save powerpoint"], "icon": "las la-file-powerpoint"}, {"function_call": "quit(self)", "name": "Close PowerPoint Application", "description": "Close PowerPoint", "parameters": [{"name": " index", "description": " Index where the slide should be inserted. Default value is as final slide.\n"}], "return": "", "example": ">>> # Start PowerPoint\n>>> powerpoint = PowerPoint()\n>>> # Close PowerPoint\n>>> powerpoint.quit()\n", "snippet": "# Start PowerPoint\npowerpoint = PowerPoint()\n# Close PowerPoint\npowerpoint.quit()\n", "keywords": ["powerpoint", "ppt", "quit", "exit"], "icon": "las la-file-powerpoint"}, {"function_call": "add_slide(index=None, type=\"blank\")", "name": "Add PowerPoint Slides", "description": "Adds slides to a presentation", "parameters": [{"name": " index", "description": " Index where the slide should be inserted. Default value is as final slide.\n"}], "return": "", "example": ">>> # Start PowerPoint\n>>> powerpoint = PowerPoint()\n>>> # Add a first slide\n>>> powerpoint.add_slide()\n", "snippet": "# Start PowerPoint\npowerpoint = PowerPoint()\n# Add a first slide\npowerpoint.add_slide()\n", "keywords": ["powerpoint", "ppt", "add", "add slide  powerpoint", "slides"], "icon": "las la-file-powerpoint"}, {"function_call": "number_of_slides(self)", "name": "Slide count", "description": "Returns the number of slides", "parameters": [], "return": "", "example": ">>> # Start PowerPoint\n>>> powerpoint = PowerPoint()\n>>> # Add some slides\n>>> powerpoint.add_slide()\n>>> powerpoint.add_slide()\n>>> # Show number of slides\n>>> powerpoint.number_of_slides()\n", "snippet": "# Start PowerPoint\npowerpoint = PowerPoint()\n# Add some slides\npowerpoint.add_slide()\npowerpoint.add_slide()\n# Show number of slides\npowerpoint.number_of_slides()\n", "keywords": ["powerpoint", "ppt", "slide count", "number of slides"], "icon": "las la-file-powerpoint"}, {"function_call": "add_text(self,text,index=None,font_size=48,font_name=None,bold=False,margin_bottom=100,margin_left=100,margin_right=100,margin_top=100)", "name": "Text to slide", "description": "Add text to a slide", "parameters": [{"name": " index", "description": " Slide index to add text. If none is specified, a new slide will be added as final slide\n"}, {"name": " text", "description": " Text to be added\n"}, {"name": " font_size", "description": " Fontsize, default value is 48\n"}, {"name": " font_name", "description": " Fontname, if not specified will take default PowerPoint font\n"}, {"name": " bold", "description": " Toggle bold with True or False, default value is False\n"}, {"name": " margin_bottom", "description": " Margin from the bottom in pixels, default value is 100 pixels\n"}, {"name": " margin_left", "description": " Margin from the left in pixels, default value is 100 pixels\n"}, {"name": " margin_right", "description": " Margin from the right in pixels, default value is 100 pixels\n"}, {"name": " margin_top", "description": " Margin from the top in pixels, default value is 100 pixels\n"}], "return": "", "example": ">>> # Start PowerPoint\n>>> powerpoint = PowerPoint()\n>>> # Add slide with text\n>>> powerpoint.add_text(text='Sample Text')\n", "snippet": "# Start PowerPoint\npowerpoint = PowerPoint()\n# Add slide with text\npowerpoint.add_text(text='Sample Text')\n", "keywords": ["powerpoint", "ppt", "text", "add text", "slides"], "icon": "las la-file-powerpoint"}, {"function_call": "delete_slide(index=None)", "name": "Delete slide", "description": "Delete a slide", "parameters": [{"name": " index", "description": " Slide index to be deleted. If none is specified, last slide will be deleted\n"}], "return": "", "example": ">>> # Start PowerPoint\n>>> powerpoint = PowerPoint()\n>>> # Add some slides\n>>> powerpoint.add_slide()\n>>> powerpoint.add_slide()\n>>> # Delete last slide\n>>> powerpoint.delete_slide()\n", "snippet": "# Start PowerPoint\npowerpoint = PowerPoint()\n# Add some slides\npowerpoint.add_slide()\npowerpoint.add_slide()\n# Delete last slide\npowerpoint.delete_slide()\n", "keywords": ["powerpoint", "ppt", "delete", "delete slide"], "icon": "las la-file-powerpoint"}, {"function_call": "replace_text(placeholder_text, replacement_text)", "name": "Replace all occurences of text in PowerPoint slides", "description": "Can be used for example to replace arbitrary placeholder value in a PowerPoint.For example when using a template slidedeck, using 'XXXX' as a placeholder.Take note that all strings are case sensitive.", "parameters": [{"name": " placeholder_text", "description": " Placeholder value (string) in the PowerPoint, this will be replaced, e.g. 'Company Name'\n"}, {"name": " replacement_text", "description": " Text (string) to replace the placeholder values with. It is recommended to make this unique in your PowerPoint to avoid wrongful replacement, e.g. 'XXXX_placeholder_XXX'\n"}], "return": "", "example": ">>> # Start PowerPoint\n>>> powerpoint = PowerPoint()\n>>> # Add some slides with text\n>>> powerpoint.add_text(text='Hello, my name is placeholder')\n>>> # Change 'placeholder' to the word 'robot\n>>> powerpoint.replace_text(placeholder_text = 'placeholder', replacement_text ='robot')\n", "snippet": "# Start PowerPoint\npowerpoint = PowerPoint()\n# Add some slides with text\npowerpoint.add_text(text='Hello, my name is placeholder')\n# Change 'placeholder' to the word 'robot\npowerpoint.replace_text(placeholder_text = 'placeholder', replacement_text ='robot')\n", "keywords": ["powerpoint", "ppt", "replace", "placeholder"], "icon": "las la-file-powerpoint"}, {"function_call": "export_to_pdf(output_path=None)", "name": "PowerPoint to PDF", "description": "Export PowerPoint presentation to PDF file", "parameters": [{"name": " path", "description": " Output path where PDF file will be exported to. Default path is home directory with filename 'pdf_export.pdf'.\n"}], "return": "", "example": ">>> # Start PowerPoint\n>>> powerpoint = PowerPoint()\n>>> # Add some slides with text\n>>> powerpoint.add_text(text='Robots are cool')\n>>> # Export to pdf\n>>> powerpoint.export_to_pdf()\n", "snippet": "# Start PowerPoint\npowerpoint = PowerPoint()\n# Add some slides with text\npowerpoint.add_text(text='Robots are cool')\n# Export to pdf\npowerpoint.export_to_pdf()\n", "keywords": ["powerpoint", "ppt", "export", "pdf"], "icon": "las la-file-powerpoint"}, {"function_call": "export_slides_to_images(output_path=None, type=\"png\")", "name": "Slides to images", "description": "Export PowerPoint slides to seperate image files", "parameters": [{"name": " output_path", "description": " Output path where image files will be exported to. Default path is home directory.\n"}, {"name": " type", "description": " Output type of the images, supports 'png' and 'jpg' with 'png' as default value\n"}], "return": "", "example": ">>> # Start PowerPoint\n>>> powerpoint = PowerPoint()\n>>> # Add some slides with text\n>>> powerpoint.add_text(text='Robots are cool')\n>>> powerpoint.add_text(text='Humans are cooler')\n>>> # Export slides to images\n>>> powerpoint.export_slides_to_images()\n", "snippet": "# Start PowerPoint\npowerpoint = PowerPoint()\n# Add some slides with text\npowerpoint.add_text(text='Robots are cool')\npowerpoint.add_text(text='Humans are cooler')\n# Export slides to images\npowerpoint.export_slides_to_images()\n", "keywords": ["powerpoint", "ppt", "export", "png", "image", "slides to image"], "icon": "las la-file-powerpoint"}]}, {"name": "Office 365", "icon": "las la-cloud", "activities": [{"function_call": "send_email_with_outlook365(client_id, client_secret, to_email, subject=\"\", body=\"\")", "name": "Send email Office Outlook 365", "description": "Send email Office Outlook 365", "parameters": [{"name": " client_id", "description": " Client id for office 365 account\n"}, {"name": " client_secret", "description": " Client secret for office 365 account\n"}, {"name": " to_email", "description": " E-mail to send to\n"}, {"name": " subject", "description": " Optional subject\n"}, {"name": " body", "description": " Optional body of the email\n"}], "return": "", "example": ">>> # Send email to 'robot@automagica.com'\n>>> send_email_with_outlook365('SampleClientID', 'SampleClientSecret', 'robot@automagica.com')\n", "snippet": "# Send email to 'robot@automagica.com'\nsend_email_with_outlook365('SampleClientID', 'SampleClientSecret', 'robot@automagica.com')\n", "keywords": ["mail", "office 365", "outlook", "email", "e-mail"], "icon": "las la-envelope"}]}, {"name": "Salesforce", "icon": "lab la-salesforce", "activities": [{"function_call": "salesforce_api_call(action, key, parameters={}, method=\"get\", data={})", "name": "Salesforce API", "description": "Activity to make calls to Salesforce REST API.", "parameters": [{"name": " action", "description": " Action (the URL)\n"}, {"name": " key", "description": " Authorisation key \n"}, {"name": " parameters", "description": " URL params\n"}, {"name": " method", "description": " Method (get, post or patch)\n"}, {"name": " data", "description": " Data for POST/PATCH.\n"}], "return": " API data\n", "example": ">>> spf_api_call('action', 'key', 'parameters')\nResponse\n", "snippet": "spf_api_call('action', 'key', 'parameters')\n", "keywords": ["salesforce"], "icon": "lab la-salesforce"}]}, {"name": "E-mail (SMTP)", "icon": "las la-at", "activities": [{"function_call": "send_mail_smtp(smtp_host,smtp_user,smtp_password,to_address,subject=\"\",message=\"\",port=587)", "name": "Mail with SMTP", "description": "This function lets you send emails with an e-mail address.", "parameters": [{"name": " smpt_host", "description": " The host of your e-mail account. \n"}, {"name": " smpt_user", "description": " The password of your e-mail account\n"}, {"name": " smpt_password", "description": " The password of your e-mail account\n"}, {"name": " to_address", "description": " The destination is the receiving mail address. \n"}, {"name": " subject", "description": " The subject \n"}, {"name": " message", "description": " The body of the mail\n"}, {"name": " port", "description": " The port variable is standard 587. In most cases this argument can be ignored, but in some cases it needs to be changed to 465.\n"}], "return": "", "example": ">>> send_mail_smpt('robot@automagica.com', 'SampleUser', 'SamplePassword', 'robotfriend@automagica.com')\n", "snippet": "send_mail_smpt('robot@automagica.com', 'SampleUser', 'SamplePassword', 'robotfriend@automagica.com')\n", "keywords": ["mail", "e-mail", "email smpt"], "icon": "las la-mail-bulk"}]}, {"name": "Windows OS", "icon": "lab la-windows", "activities": [{"function_call": "find_window_title(searchterm, partial=True)", "name": "Find window with specific title", "description": "Find a specific window based on the name, either a perfect match or a partial match.", "parameters": [{"name": " searchterm", "description": " Ttile to look for, e.g. 'Calculator' when looking for the Windows calculator\n"}, {"name": " partial", "description": " Option to look for titles partially, e.g. 'Edge' will result in finding 'Microsoft Edge' when partial is set to True. Default value is True\n"}], "return": "", "example": ">>> # Make text file\n>>> testfile = make_text_file()\n>>> # Open the file\n>>> open_file(testfile)\n>>> #Find 'Notepad' in window titles\n>>> find_window_title('Notepad')\n'generated_text_file.txt - Notepad'\n", "snippet": "# Make text file\ntestfile = make_text_file()\n# Open the file\nopen_file(testfile)\n#Find 'Notepad' in window titles\nfind_window_title('Notepad')\n", "keywords": ["windows", "user", "password", "remote desktop", "remote", "citrix", "vnc", "remotedesktop"], "icon": "lab la-readme"}, {"function_call": "start_remote_desktop(ip, username, password=None, desktop_width=1920, desktop_height=1080)", "name": "Login to Windows Remote Desktop", "description": "Create a RDP and login to Windows Remote Desktop", "parameters": [{"name": " ip", "description": " IP address of remote desktop\n"}, {"name": " username", "description": " Username\n"}, {"name": " password", "description": " Password\n"}, {"name": " desktop_width", "description": " Resolution (width) of desktop, standard value is 1920 (full HD)\n"}, {"name": " desktop_height", "description": " Resolution (height) of desktop, standard value is 1080 (full HD)\n"}], "return": "", "example": ">>> start_remote_desktop('123.456.789.10','Administrator', 'SamplePassword')\n", "snippet": "start_remote_desktop('123.456.789.10','Administrator', 'SamplePassword')\n", "keywords": ["windows", "user", "password", "remote desktop", "remote", "citrix", "vnc", "remotedesktop"], "icon": "las la-passport"}, {"function_call": "close_remote_desktop()", "name": "Stop Windows Remote Desktop", "description": "Stop Windows Remote Desktop", "parameters": [], "return": "", "example": ">>> close_remote_desktop()\n", "snippet": "close_remote_desktop()\n", "keywords": ["windows", "user", "password", "remote desktop", "remote", "citrix", "vnc", "remotedesktop", "stop"], "icon": "las la-passport"}, {"function_call": "set_user_password(username, password)", "name": "Set Windows password", "description": "Sets the password for a Windows user.", "parameters": [{"name": " username", "description": " Username\n"}, {"name": " password", "description": " New password\n"}], "return": "", "example": ">>> set_user_password('SampleUsername', 'SamplePassword')\n", "snippet": "set_user_password('SampleUsername', 'SamplePassword')\n", "keywords": ["windows", "user", "password", "account"], "icon": "las la-passport"}, {"function_call": "validate_user_password(username, password)", "name": "Check Windows password", "description": "Validates a Windows user password if it is correct", "parameters": [{"name": " username", "description": " Username\n"}, {"name": " password", "description": " New password\n"}], "return": " True if the password is correct\n", "example": ">>> validate_user_password('SampleUsername', 'SamplePassword')\nFalse\n", "snippet": "validate_user_password('SampleUsername', 'SamplePassword')\n", "keywords": ["windows", "user", "password", "account"], "icon": "las la-passport"}, {"function_call": "lock_windows()", "name": "Lock Windows", "description": "Locks Windows requiring login to continue.", "parameters": [], "return": "", "example": ">>> lock_windows()\n", "snippet": "lock_windows()\n", "keywords": ["windows", "user", "password", "account", "lock", "freeze", "hibernate", "sleep", "lockescreen"], "icon": "las la-user-lock"}, {"function_call": "is_logged_in()", "name": "Check if Windows logged in", "description": "Checks if the current user is logged in and not on the lockscreen. Most automations do not work properly when the desktop is locked.", "parameters": [], "return": " True if the user is logged in, False if not\n", "example": ">>> is_logged_in()\nTrue\n", "snippet": "is_logged_in()\n", "keywords": ["windows", "login", "logged in", "lockscreen", "user", "password", "account", "lock", "freeze", "hibernate", "sleep"], "icon": "lar la-user"}, {"function_call": "is_desktop_locked()", "name": "Check if Windows is locked", "description": "Checks if the current user is locked out and on the lockscreen. Most automations do not work properly when the desktop is locked.", "parameters": [], "return": " True when the lockscreen is active, False if not.\n", "example": ">>> desktop_locked()\nTrue\n", "snippet": "desktop_locked()\n", "keywords": ["windows", "login", "logged in", "lockscreen", "user", "password", "account", "lock", "locked", "freeze", "hibernate", "sleep"], "icon": "las la-user"}, {"function_call": "get_username()", "name": "Get Windows username", "description": "Get current logged in user's username", "parameters": [], "return": "", "example": ">>> get_username()\n'Automagica'\n", "snippet": "get_username()\n", "keywords": ["windows", "login", "logged in", "lockscreen", "user", "password", "account", "lock", "locked", "freeze", "hibernate", "sleep"], "icon": "las la-user"}, {"function_call": "set_to_clipboard(text)", "name": "Set clipboard", "description": "Set any text to the Windows clipboard.", "parameters": [{"name": " text", "description": " Text to put in the clipboard\n"}], "return": "", "example": ">>> # Create some sample text\n>>> sample_text = 'A robots favourite food must be computer chips'\n>>> # Set to clipboard\n>>> set_to_clipboard(sample_text)\n>>> # Print the clipboard to verify\n>>> print( get_from_clipboard() )\n", "snippet": "# Create some sample text\nsample_text = 'A robots favourite food must be computer chips'\n# Set to clipboard\nset_to_clipboard(sample_text)\n# Print the clipboard to verify\nprint( get_from_clipboard() )\n", "keywords": ["copy", "clipboard", "clip board", "ctrl c", "ctrl v", "paste"], "icon": "las la-clipboard-check"}, {"function_call": "get_from_clipboard()", "name": "Get clipboard", "description": "Get the text currently in the Windows clipboard", "parameters": [], "return": " Text currently in the clipboard\n", "example": ">>> # Create some sample text\n>>> sample_text = 'A robots favourite food must be computer chips'\n>>> # Set to clipboard\n>>> set_to_clipboard(sample_text)\n>>> # Get the clipboard to verify\n>>> get_from_clipboard()\n'A robots favourite food must be computer chips'\n", "snippet": "# Create some sample text\nsample_text = 'A robots favourite food must be computer chips'\n# Set to clipboard\nset_to_clipboard(sample_text)\n# Get the clipboard to verify\nget_from_clipboard()\n", "keywords": ["copy", "clipboard", "clip board", "ctrl c", "ctrl v", "paste"], "icon": "las la-clipboard-list"}, {"function_call": "clear_clipboard()", "name": "Empty clipboard", "description": "Empty text from clipboard. Getting clipboard data after this should return in None", "parameters": [], "return": "", "example": ">>> # Create some sample text\n>>> sample_text = 'A robots favourite food must be computer chips'\n>>> # Set to clipboard\n>>> set_to_clipboard(sample_text)\n>>> # Clear the clipboard\n>>> clear_clipboard()\n>>> # Get clipboard contents to verify\n>>> print( get_from_clipboard() )\nNone\n", "snippet": "# Create some sample text\nsample_text = 'A robots favourite food must be computer chips'\n# Set to clipboard\nset_to_clipboard(sample_text)\n# Clear the clipboard\nclear_clipboard()\n# Get clipboard contents to verify\nprint( get_from_clipboard() )\n", "keywords": ["copy", "clipboard", "clip board", "ctrl c", "ctrl v", "paste"], "icon": "las la-clipboard"}, {"function_call": "run_vbs_script(script_path, parameters=[])", "name": "Run VBSscript", "description": "Run a VBScript file", "parameters": [{"name": " script_path", "description": " Path to the .vbs-file\n"}, {"name": " parameters", "description": " Additional arguments to pass to the VBScript\n"}], "return": "", "example": ">>> # Run a VBS script\n>>> run_vbs_script('Samplescript.vbs')\n", "snippet": "# Run a VBS script\nrun_vbs_script('Samplescript.vbs')\n", "keywords": ["vbs", "VBScript"], "icon": "las la-cogs"}, {"function_call": "beep(frequency=1000, duration=500)", "name": "Beep", "description": "Make a beeping sound. Make sure your volume is up and you have hardware connected.", "parameters": [{"name": " frequency", "description": " Integer to specify frequency (Hz), default value is 1000 Hz\n"}, {"name": " duration", "description": " Integer to specify duration of beep in miliseconds (ms), default value is 500 ms.\n"}], "return": " Sound\n", "example": ">>> beep()\n", "snippet": "beep()\n", "keywords": ["beep", "sound", "noise", "speaker", "alert"], "icon": "las la-volume-up"}, {"function_call": "get_all_network_interface_names()", "name": "Get all network interface names", "description": "Returns a list of all network interfaces of the current machine", "parameters": [], "return": "", "example": ">>> get_all_network_interface_names()\n['Microsoft Kernel Debug Network Adapter', 'Realtek Gaming GbE Family Controller', 'WAN Miniport (SSTP)']\n", "snippet": "get_all_network_interface_names()\n", "keywords": ["networking", "connection", "list"], "icon": "las la-ethernet"}, {"function_call": "enable_network_interface(name)", "name": "Enable network interface", "description": "Enables a network interface by its name.", "parameters": [{"name": " name", "description": " Name of the network\n"}], "return": "", "example": ">>> enable_network_interface('Realtek Gaming GbE Family Controller')\n", "snippet": "enable_network_interface('Realtek Gaming GbE Family Controller')\n", "keywords": ["networking", "connection", "enable"], "icon": "las la-ethernet"}, {"function_call": "disable_network_interface(name)", "name": "Disable network interface", "description": "Disables a network interface by its name.", "parameters": [{"name": " name", "description": " Name of the network interface\n"}], "return": "", "example": ">>> disable_network_interface('Realtek Gaming GbE Family Controller')\n", "snippet": "disable_network_interface('Realtek Gaming GbE Family Controller')\n", "keywords": ["networking", "connection", "disable"], "icon": "las la-ethernet"}, {"function_call": "get_default_printer_name()", "name": "Get default printer", "description": "Returns the name of the printer selected as default", "parameters": [], "return": "", "example": ">>> get_default_printer_name()\n'Epson MF742C/744C'\n", "snippet": "get_default_printer_name()\n", "keywords": ["printing", "get default printer name", "default printer"], "icon": "las la-print"}, {"function_call": "set_default_printer(name)", "name": "Set default printer", "description": "Set the default printer.", "parameters": [{"name": " name", "description": " Printer name\n"}], "return": "", "example": ">>> set_default_printer('Epson MF742C/744C')\n", "snippet": "set_default_printer('Epson MF742C/744C')\n", "keywords": ["printing", "set default printer name", "default printer"], "icon": "las la-print"}, {"function_call": "remove_printer(name)", "name": "Remove printer", "description": "Removes a printer by its name", "parameters": [{"name": " name", "description": " Printer name to remove\n"}], "return": "", "example": ">>> remove_printer('Epson MF742C/744C')\n", "snippet": "remove_printer('Epson MF742C/744C')\n", "keywords": ["printing", "remove printer", "printer"], "icon": "las la-print"}, {"function_call": "get_service_status(name)", "name": "Get service status", "description": "Returns the status of a service on the machine", "parameters": [{"name": " name", "description": " Name of service\n"}], "return": "", "example": ">>> get_service_status('Windows Backup')\n'stopped'\n", "snippet": "get_service_status('Windows Backup')\n", "keywords": ["services", "get service status", "status"], "icon": "las la-cog"}, {"function_call": "start_service(name)", "name": "Start a service", "description": "Starts a Windows service", "parameters": [{"name": " name", "description": " Name of service\n"}], "return": "", "example": ">>> start_service('Windows Backup')\n", "snippet": "start_service('Windows Backup')\n", "keywords": ["services", "start a service", "start"], "icon": "las la-cog"}, {"function_call": "stop_service(name)", "name": "Stop a service", "description": "Stops a Windows service", "parameters": [{"name": " name", "description": " Name of service\n"}], "return": "", "example": ">>> stop_service('Windows Backup')\n", "snippet": "stop_service('Windows Backup')\n", "keywords": ["services", "stop a service", "stop"], "icon": "las la-cog"}, {"function_call": "set_window_to_foreground(title)", "name": "Set window to foreground", "description": "Sets a window to foreground by its title.", "parameters": [{"name": " name", "description": " Name of service\n"}], "return": "", "example": ">>> set_window_to_foreground('Notepad - Untitled')\n", "snippet": "set_window_to_foreground('Notepad - Untitled')\n", "keywords": ["window", "foreground"], "icon": "las la-window-restore"}, {"function_call": "get_foreground_window_title()", "name": "Get foreground window title", "description": "Retrieve the title of the current foreground window", "parameters": [], "return": "", "example": ">>> get_foreground_window_title()\n'IPython'\n", "snippet": "get_foreground_window_title()\n", "keywords": ["window", "foreground", "title"], "icon": "las la-window-restore"}, {"function_call": "close_window(title)", "name": "Close window", "description": "Closes a window by its title", "parameters": [{"name": " title", "description": " Title of window\n"}], "return": "", "example": ">>> close_window('Untitled - Notepad')\n", "snippet": "close_window('Untitled - Notepad')\n", "keywords": ["window", "close", "title"], "icon": "las la-window-restore"}, {"function_call": "maximize_window(title)", "name": "Maximize window", "description": "Maximizes a window by its title", "parameters": [{"name": " title", "description": " Title of window\n"}], "return": "", "example": ">>> maximize_window('Untitled - Notepad')\n", "snippet": "maximize_window('Untitled - Notepad')\n", "keywords": ["window", "maximize", "title"], "icon": "las la-window-restore"}, {"function_call": "restore_window(title)", "name": "Restore window", "description": "Restore a window by its title", "parameters": [{"name": " title", "description": " Title of window\n"}], "return": "", "example": ">>> restore_window('Untitled - Notepad')\n", "snippet": "restore_window('Untitled - Notepad')\n", "keywords": ["window", "restore", "title"], "icon": "las la-window-restore"}, {"function_call": "minimize_window(title)", "name": "Minimize window", "description": "Minimizes a window by its title", "parameters": [{"name": " title", "description": " Title of window\n"}], "return": "", "example": ">>> minimize_window(title)\n", "snippet": "minimize_window(title)\n", "keywords": ["window", "minimize", "title"], "icon": "las la-window-restore"}, {"function_call": "resize_window(title, x, y, width, height)", "name": "Resize window", "description": "Resize a window by its title", "parameters": [{"name": " title", "description": " Title of window\n"}, {"name": " x", "description": " Starting x position\n"}, {"name": " y", "description": " Starting y position\n"}, {"name": " width", "description": " Width\n"}, {"name": " height", "description": " Height\n"}], "return": "", "example": ">>> resize_window('Untitled - Notepad', 100, 200, 300, 400)\n", "snippet": "resize_window('Untitled - Notepad', 100, 200, 300, 400)\n", "keywords": ["window", "resize", "title"], "icon": "las la-window-restore"}, {"function_call": "hide_window(title)", "name": "Hide window", "description": "Hides a window from the user desktop by using it's title", "parameters": [{"name": " title", "description": " Title of window\n"}], "return": "", "example": ">>> hide_window('Untitled - Notepad')\n", "snippet": "hide_window('Untitled - Notepad')\n", "keywords": ["window", "hide", "title"], "icon": "las la-window-restore"}]}, {"name": "Terminal", "icon": "las la-terminal", "activities": [{"function_call": "run_ssh_command(user, host, command)", "name": "Run SSH command", "description": "Runs a command over SSH (Secure Shell)", "parameters": [{"name": " user", "description": " User\n"}, {"name": " host", "description": " Host\n"}, {"name": " command", "description": " Command\n"}], "return": "", "example": ">>> run_ssh_command('root', 'machine', 'ls -a')\n'. .. .bashrc'\n", "snippet": "run_ssh_command('root', 'machine', 'ls -a')\n", "keywords": ["ssh", "command"], "icon": "las la-terminal"}]}, {"name": "SNMP", "icon": "las la-ethernet", "activities": [{"function_call": "snmp_get(target, oids, credentials, port=161, engine=None, context=None)", "name": "SNMP Get", "description": "Retrieves data from an SNMP agent using SNMP (Simple Network Management Protocol)", "parameters": [{"name": " target", "description": " Target\n"}, {"name": " oids", "description": " oids\n"}, {"name": " credentials", "description": " credentials\n"}, {"name": " port", "description": " Port (default 161)\n"}, {"name": " engine", "description": " Engine (default none)\n"}, {"name": " context", "description": " Contect (default none)\n"}], "return": "", "example": ">>> snmp_get()\n", "snippet": "snmp_get()\n", "keywords": ["snmp", "simple network management protocol", "protocols", "get"], "icon": "las la-ethernet"}]}, {"name": "Active Directory", "icon": "las la-user", "activities": [{"function_call": "ActiveDirectory(ldap_server=None, username=None, password=None)", "name": "AD interface", "description": "Interface to Windows Active Directory through ADSI. Connects to the AD domain to which the machine is joined by default.", "parameters": [{"name": " ldap_server", "description": " LDAP server\n"}, {"name": " username", "description": " Username\n"}, {"name": " password", "description": " Password\n"}], "return": "", "example": ">>> ad = ActiveDirectory()\n", "snippet": "ad = ActiveDirectory()\n", "keywords": ["AD", "active directory", "activedirectory"], "icon": "las la-audio-description"}, {"function_call": "get_object_by_distinguished_name(distinguished_name)", "name": "Get AD object by name", "description": "Interface to Windows Active Directory through ADSI", "parameters": [{"name": " distinguished_name", "description": " Name\n"}], "return": "", "example": ">>> ad = ActiveDirectory()\n>>> ad.get_object_by_distinguished_name('SampleDN')\n", "snippet": "ad = ActiveDirectory()\nad.get_object_by_distinguished_name('SampleDN')\n", "keywords": ["AD", "active directory", "activedirectory"], "icon": "las la-audio-description"}]}, {"name": "Utilities", "icon": "las la-toolbox", "activities": [{"function_call": "home_path(filename=None)", "name": "Get user home path", "description": "Returns the current user's home path", "parameters": [{"name": " subdir", "description": " Optional filename to add to the path. Can also be a subdirectory\n"}], "return": " Path to the current user's home folder\n", "example": ">>> # Home_path without arguments will return the home path\n>>> print( home_path() )\n>>> # When looking for a file in the home path, we can specify it\n>>> # First make a sample text file\n>>> make_text_file()\n>>> # Refer to it\n>>> home_path('generated_text_file.txt')\n'C:\\\\Users\\\\<username>\\\\generated_text_file.txt'\n", "snippet": "# Home_path without arguments will return the home path\nprint( home_path() )\n# When looking for a file in the home path, we can specify it\n# First make a sample text file\nmake_text_file()\n# Refer to it\nhome_path('generated_text_file.txt')\n", "keywords": ["home", "home path", "homepath", "home directory", "homedir"], "icon": "las la-home"}, {"function_call": "desktop_path(filename=None)", "name": "Get desktop path", "description": "Returns the current user's desktop path", "parameters": [{"name": " filename", "description": " Optional filename to add to the path. Can also be a subdirectory\n"}], "return": " Path to the current user's desktop folder\n", "example": ">>> # Desktop_path without arguments will return the home path\n>>> print( desktop_path() )\n>>> # When looking for a file on the desktop, we can specify it\n>>> # First make a sample text file\n>>> make_text_file()\n>>> # Refer to it\n>>> desktop_path('generated_text_file.txt')\n'C:\\\\Users\\\\<username>\\\\Desktop\\\\generated_text_file.txt'\n", "snippet": "# Desktop_path without arguments will return the home path\nprint( desktop_path() )\n# When looking for a file on the desktop, we can specify it\n# First make a sample text file\nmake_text_file()\n# Refer to it\ndesktop_path('generated_text_file.txt')\n", "keywords": ["desktop", "desktop path", "desktoppath", "desktop directory", "desktopdir"], "icon": "lar la-desktop"}, {"function_call": "downloads_path()", "name": "Get downloads path", "description": "Returns the current user's default download path", "parameters": [], "return": " Path to the current user's downloads folder\n", "example": ">>> # Find downloads path\n>>> downloads_path()\n", "snippet": "# Find downloads path\ndownloads_path()\n", "keywords": ["download", "download path", "downloadpath", "download directory", "download dir", "downloaddir"], "icon": "lar la-download"}, {"function_call": "open_file(input_path)", "name": "Open file", "description": "Opens file with default programs", "parameters": [{"name": " input_path", "description": " Path to file. \n"}], "return": " Path to file\n", "example": ">>> # Make text file\n>>> testfile = make_text_file()\n>>> # Open the file\n>>> open_file(testfile)\n", "snippet": "# Make text file\ntestfile = make_text_file()\n# Open the file\nopen_file(testfile)\n", "keywords": ["file", "open", "open file", "show", "reveal", "explorer", "run", "start"], "icon": "lar la-file"}, {"function_call": "set_wallpaper(image_path)", "name": "Set wallpaper", "description": "Set Windows desktop wallpaper with the the specified image", "parameters": [{"name": " image_path", "description": " Path to the image. This image will be set as desktop wallpaper\n"}], "return": "", "example": ">>> # Caution: this example will change your wallpaper\n>>> # Take a screenshot of current screen\n>>> screenshot = take_screenshot()\n>>> # Flip it hozirontally for fun\n>>> mirror_image_horizontally(screenshot)\n>>> # Set flipped image as wallpaper\n>>> set_wallpaper(screenshot)\n", "snippet": "# Caution: this example will change your wallpaper\n# Take a screenshot of current screen\nscreenshot = take_screenshot()\n# Flip it hozirontally for fun\nmirror_image_horizontally(screenshot)\n# Set flipped image as wallpaper\nset_wallpaper(screenshot)\n", "keywords": ["desktop", "desktop path", "desktoppath", "desktop directory", "desktopdir", "wallpaper", "wall paper", "wall"], "icon": "las la-desktop"}, {"function_call": "download_file_from_url(url, output_path=None)", "name": "Download file from a URL", "description": "Download file from a URL", "parameters": [{"name": " url", "description": " Source URL to download file from\n"}, {"name": " output_path", "description": " Target path, default to homedir with name '_download_' + random addition\n"}], "return": " Target path as string\n", "example": ">>> # Download robot picture from the wikipedia robot page\n>>> picture_url = 'https://upload.wikimedia.org/wikipedia/commons/thumb/6/6c/Atlas_from_boston_dynamics.jpg/220px-Atlas_from_boston_dynamics.jpg'\n>>> download_file_from_url(url = picture_url, output_path ='robot.jpg')\n'C:\\\\Users\\\\<username>\\\\robot.jpg'\n", "snippet": "# Download robot picture from the wikipedia robot page\npicture_url = 'https://upload.wikimedia.org/wikipedia/commons/thumb/6/6c/Atlas_from_boston_dynamics.jpg/220px-Atlas_from_boston_dynamics.jpg'\ndownload_file_from_url(url = picture_url, output_path ='robot.jpg')\n", "keywords": ["download", "download url", "save", "request"], "icon": "las la-cloud-download-alt"}]}, {"name": "System", "icon": "las la-laptop", "activities": [{"function_call": "rename_file(input_path, output_name=None)", "name": "Rename a file", "description": "This activity will rename a file. If the the desired name already exists in the folder file will not be renamed. Make sure to add the exstention to specify filetype.", "parameters": [{"name": " input_path", "description": " Full path to file that will be renamed\n"}, {"name": " output_name", "description": " New name of the file e.g. 'newfile.txt'. By default file will be renamed to original folder name with '_renamed' added to the folder name.\n"}], "return": " Path to renamed file as a string. None if folder could not be renamed.\n", "example": ">>> # Make new text file in home directory\n>>> text_file = make_text_file()\n>>> # Rename the file\n>>> rename_file(text_file, output_name='brand_new_filename.txt')\nC:\\\\Users\\\\<username>\\\\brand_new_filename.txt'\n", "snippet": "# Make new text file in home directory\ntext_file = make_text_file()\n# Rename the file\nrename_file(text_file, output_name='brand_new_filename.txt')\n", "keywords": ["file", "rename", "rename file", "organise file", "files", "file manipulation", "explorer", "nautilus"], "icon": "las la-file-contract"}, {"function_call": "move_file(input_path, output_path=None)", "name": "Move a file", "description": "If the new location already contains a file with the same name.", "parameters": [{"name": " input_path", "description": " Full path to the file that will be moved\n"}, {"name": " output_path", "description": " Path to the folder where file will be moved to, defaults to input_path with '_moved' added\n"}], "return": " Path to renamed file as a string. None if folder could not be moved.\n", "example": ">>> # Make new text file in home directory\n>>> text_file = make_text_file()\n>>> # Make a folder to move the file to\n>>> new_folder = create_folder()\n>>> # Move text file to the folder\n>>> move_file(text_file, new_folder)\n", "snippet": "# Make new text file in home directory\ntext_file = make_text_file()\n# Make a folder to move the file to\nnew_folder = create_folder()\n# Move text file to the folder\nmove_file(text_file, new_folder)\n", "keywords": ["file", "move", "move file", "organise file", "files", "file manipulation", "explorer", "nautilus"], "icon": "las la-file-export"}, {"function_call": "remove_file(path)", "name": "Remove a file", "description": "Remove a file", "parameters": [{"name": " path", "description": " Full path to the file that will be deleted.\n"}], "return": " Path to removed file as a string.\n", "example": ">>> # Make new text file in home directory\n>>> text_file = make_text_file()\n>>> # Remove the file\n>>> remove_file(text_file)\n", "snippet": "# Make new text file in home directory\ntext_file = make_text_file()\n# Remove the file\nremove_file(text_file)\n", "keywords": ["file", "delete", "erase", "delete file", "organise file", "files", "file manipulation", "explorer", "nautilus"], "icon": "las la-trash"}, {"function_call": "file_exists(path)", "name": "Check if file exists", "description": "This function checks whether the file with the given path exists.", "parameters": [{"name": " path", "description": " Full path to the file to check.\n"}], "return": "", "example": ">>> # Make new text file in home directory\n>>> text_file = make_text_file()\n>>> # Check if file exists\n>>> file_exists(text_file)\nTrue\n", "snippet": "# Make new text file in home directory\ntext_file = make_text_file()\n# Check if file exists\nfile_exists(text_file)\n", "keywords": ["file", "exists", "files", "file manipulation", "explorer", "nautilus"], "icon": "las la-tasks"}, {"function_call": "wait_file_exists(path, timeout=60)", "name": "Wait until a file exists.", "description": "Note that this activity is blocking and will keep the system waiting.", "parameters": [{"name": " path", "description": " Full path to file.\n"}, {"name": " timeout", "description": " Maximum time in seconds to wait before continuing. Default value is 60 seconds.\n"}], "return": "", "example": ">>> # Make new text file in home directory\n>>> text_file = make_text_file()\n>>> # Wait untile file exists # Should pass immediatly\n>>> wait_file_exists(text_file)\n", "snippet": "# Make new text file in home directory\ntext_file = make_text_file()\n# Wait untile file exists # Should pass immediatly\nwait_file_exists(text_file)\n", "keywords": ["file", "wait", "wait till exists", "files", "file manipulation", "explorer", "nautilus"], "icon": "las la-list-alt"}, {"function_call": "write_list_to_file(list_to_write, file_path)", "name": "List to .txt", "description": "Writes a list to a  text (.txt) file.Every element of the entered list is written on a new line of the text file.", "parameters": [{"name": " list_to_write", "description": " List to write to .txt file\n"}, {"name": " file_path", "description": " Path to the text-file. \n"}], "return": "", "example": ">>> # Make a list to write\n>>> robot_names = ['WALL-E', 'Terminator', 'R2D2']\n>>> # Create a new text file\n>>> text_file = make_text_file()\n>>> write_list_to_file(robot_names, text_file)\n>>> # Open the file for illustration\n>>> open_file(text_file)\n", "snippet": "# Make a list to write\nrobot_names = ['WALL-E', 'Terminator', 'R2D2']\n# Create a new text file\ntext_file = make_text_file()\nwrite_list_to_file(robot_names, text_file)\n# Open the file for illustration\nopen_file(text_file)\n", "keywords": ["list", "text", "txt", "list to file", "write list", "write"], "icon": "las la-list"}, {"function_call": "read_list_from_txt(input_path)", "name": "Read list from .txt file", "description": "This activity reads the content of a .txt file to a list and returns that list.Every new line from the .txt file becomes a new element of the list. The activity willnot work if the entered path is not attached to a .txt file.", "parameters": [{"name": " input_path", "description": " Path to the .txt file\n"}], "return": " List with contents of specified .txt file\n", "example": ">>> # Make a list to write\n>>> robot_names = ['WALL-E', 'Terminator', 'R2D2']\n>>> # Create a new text file\n>>> text_file = make_text_file()\n>>> write_list_to_file(robot_names, text_file)\n>>> # Read list from file\n>>> read_list_from_txt(text_file)\n['WALL-E', 'Terminator', 'R2D2']\n", "snippet": "# Make a list to write\nrobot_names = ['WALL-E', 'Terminator', 'R2D2']\n# Create a new text file\ntext_file = make_text_file()\nwrite_list_to_file(robot_names, text_file)\n# Read list from file\nread_list_from_txt(text_file)\n", "keywords": ["list", "text", "txt", "list to file", "write list", "read", "read txt", "read text"], "icon": "las la-th-list"}, {"function_call": "read_from_txt(file_path)", "name": "Read .txt file", "description": "This activity reads a .txt file and returns the content", "parameters": [{"name": " input_path", "description": " Path to the .txt file\n"}], "return": " Contents of specified .txt file\n", "example": ">>> # Create a new text file\n>>> text_file = make_text_file()\n>>> # Read list from file\n>>> read_from_txt(text_file)\n'Sample text'\n", "snippet": "# Create a new text file\ntext_file = make_text_file()\n# Read list from file\nread_from_txt(text_file)\n", "keywords": ["list", "text", "txt", "list to file", "read", "read txt", "read text"], "icon": "las la-th-list"}, {"function_call": "append_line(text, file_path)", "name": "Append to .txt", "description": "Append a text line to a file and creates the file if it does not exist yet.", "parameters": [{"name": " text", "description": " The text line to write to the end of the file\n"}, {"name": " file_path", "description": " Path to the file to write to\n"}], "return": "", "example": ">>> # Create a new text file\n>>> text_file = make_text_file()\n>>> # Append a few lines to the file\n>>> append_line('Line 1', text_file)\n>>> append_line('Line 2', text_file)\n>>> append_line('Line 3', text_file)\n>>> # Open the file for illustration\n>>> open_file(text_file)\n", "snippet": "# Create a new text file\ntext_file = make_text_file()\n# Append a few lines to the file\nappend_line('Line 1', text_file)\nappend_line('Line 2', text_file)\nappend_line('Line 3', text_file)\n# Open the file for illustration\nopen_file(text_file)\n", "keywords": ["list", "text", "txt", "list to file", "write list", "read", "write txt", "append text", "append line", "append", "add to file", "add"], "icon": "las la-tasks"}, {"function_call": "make_text_file(text=\"Sample text\", output_path=None)", "name": "Make text file", "description": "Initialize text file", "parameters": [{"name": " text", "description": " The text line to write to the end of the file. Default text is 'Sample text'\n"}, {"name": " output_path", "description": " Ouput path. Will write to home directory on default\n"}], "return": " Path as string\n", "example": ">>> # Create a new text file\n>>> text_file = make_text_file()\nC:\\\\Users\\\\<username>\\\\generated_text_file.txt'\n", "snippet": "# Create a new text file\ntext_file = make_text_file()\n", "keywords": ["make text file", "text_file", "testfile", "exampel file", "make file", "make", "new file", "new text_file", "txt", "new txt"], "icon": "las la-file-alt"}, {"function_call": "read_text_file_to_list(file_path)", "name": "Read .txt file with newlines to list", "description": "Read a text file to a Python list-object", "parameters": [{"name": " file_path", "description": " Path to the text file which should be read to a list\n"}], "return": " List with the lines in the text file\n", "example": ">>> # Create a new text file\n>>> text_file = make_text_file(text=\"First line!\\nSecond line!\")\n>>> # Read the text file to a list\n>>> lines = read_text_file_to_list(text_file)\n>>> lines\n['First line!', 'Second line!']\n", "snippet": "# Create a new text file\ntext_file = make_text_file(text=\"First line!\\nSecond line!\")\n# Read the text file to a list\nlines = read_text_file_to_list(text_file)\nlines\n", "keywords": ["read text file", "list", "reading text file"], "icon": "las la-copy"}, {"function_call": "copy_file(input_path, output_path=None)", "name": "Copy a file", "description": "Copies a file from one place to another.If the new location already contains a file with the same name, a random 4 character uid is added to the name.", "parameters": [{"name": " input_path", "description": " Full path to the source location of the file\n"}, {"name": " output_path", "description": " Optional full path to the destination location of the folder. If not specified file will be copied to the same location with a random 8 character uid is added to the name.\n"}], "return": " New path as string\n", "example": ">>> # Create a new text file\n>>> text_file = make_text_file()\n>>> # Copy the text file\n>>> copy_file(text_file)\nC:\\\\Users\\\\<username>\\\\generated_text_file.txt'\n", "snippet": "# Create a new text file\ntext_file = make_text_file()\n# Copy the text file\ncopy_file(text_file)\n", "keywords": ["make text file", "text_file", "testfile", "example file", "make file", "make", "new file", "new text_file", "txt", "new txt"], "icon": "las la-copy"}, {"function_call": "get_file_extension(file_path)", "name": "Get file extension", "description": "Get extension of a file", "parameters": [{"name": " file_path", "description": " Path to file to get extension from\n"}], "return": " String with extension, e.g. '.txt'\n", "example": ">>> # Create a new text file\n>>> text_file = make_text_file()\n>>> # Get file extension of this text file\n>>> get_file_extension(text_file)\n'.txt'\n", "snippet": "# Create a new text file\ntext_file = make_text_file()\n# Get file extension of this text file\nget_file_extension(text_file)\n", "keywords": ["file", "extension", "file extension", "details"], "icon": "las la-info"}, {"function_call": "send_to_printer(file_path)", "name": "Print", "description": "Send file to default printer to priner. This activity sends a file to the printer. Make sure to have a default printer set up.", "parameters": [{"name": " file_path", "description": " Path to the file to print, should be a printable file\n"}], "return": "", "example": ">>> # Caution as this example could result in a print from default printer\n>>> # Create a new text file\n>>> text_file = make_text_file(text = 'What does a robot do at lunch? Take a megabyte!')\n>>> # Print the text file\n>>> send_to_printer(text_file)\n", "snippet": "# Caution as this example could result in a print from default printer\n# Create a new text file\ntext_file = make_text_file(text = 'What does a robot do at lunch? Take a megabyte!')\n# Print the text file\nsend_to_printer(text_file)\n", "keywords": ["print", "printer", "printing", "ink", "export"], "icon": "las la-print"}]}, {"name": "PDF", "icon": "las la-file-pdf", "activities": [{"function_call": "read_text_from_pdf(file_path)", "name": "Text from PDF", "description": "Extracts the text from a PDF. This activity reads text from a pdf file. Can only read PDF files that contain a text layer.", "parameters": [{"name": " file_path", "description": " Path to the PDF (either relative or absolute)\n"}], "return": " The text from the PDF\n", "example": ">>> # Caution, for this example to work a .pdf example file will be downloaded from automagica.com FTP\n>>> example_pdf = download_file_from_url('http://automagica.com/examples/example_document.pdf')\n>>> # Open example pdf for illustration\n>>> open_file(example_pdf)\n>>> # Read the text\n>>> read_text_from_pdf(example_pdf)\n", "snippet": "# Caution, for this example to work a .pdf example file will be downloaded from automagica.com FTP\nexample_pdf = download_file_from_url('http://automagica.com/examples/example_document.pdf')\n# Open example pdf for illustration\nopen_file(example_pdf)\n# Read the text\nread_text_from_pdf(example_pdf)\n", "keywords": ["PDF", "read", "text", "extract text", "PDF file"], "icon": "las la-glasses"}, {"function_call": "join_pdf_files(first_file_path, second_file_path, third_file_path=None, output_path=None)", "name": "Merge PDF", "description": "Merges multiple PDFs into a single file", "parameters": [{"name": " first_file_path", "description": " Path to first PDF file\n"}, {"name": " second_file_path", "description": " Path to second PDF file\n"}, {"name": " third_file_path", "description": " Path to third PDF file, optional\n"}, {"name": " output_path", "description": " Full path where joined pdf files can be written. If no path is given will write to home dir as 'merged_pdf.pdf'\n"}], "return": " Output path as string\n", "example": ">>> # Caution, for this example to work a .pdf example file will be downloaded from automagica.com FTP\n>>> example_pdf = download_file_from_url('http://automagica.com/examples/example_document.pdf')\n>>> # Join the PDF file with itself for illustration, could also be different files\n>>> merged_pdf = join_pdf_files(example_pdf, example_pdf)\n>>> # Open resulting PDF file for illustration\n>>> open_file(merged_pdf)\n", "snippet": "# Caution, for this example to work a .pdf example file will be downloaded from automagica.com FTP\nexample_pdf = download_file_from_url('http://automagica.com/examples/example_document.pdf')\n# Join the PDF file with itself for illustration, could also be different files\nmerged_pdf = join_pdf_files(example_pdf, example_pdf)\n# Open resulting PDF file for illustration\nopen_file(merged_pdf)\n", "keywords": ["PDF", "read", "text", "extract text", "PDF file", "join PDF", "join", "merge", "merge PDF"], "icon": "las la-object-ungroup"}, {"function_call": "extract_page_range_from_pdf(file_path, start_page, end_page, output_path=None)", "name": "Extract page from PDF", "description": "Extracts a particular range of a PDF to a separate file.", "parameters": [{"name": " file_path", "description": " Path to the PDF (either relative or absolute)\n"}, {"name": " start_page", "description": " Page number to start from, with 0 being the first page\n"}, {"name": " end_page", "description": " Page number to end with, with 0 being the first page\n"}], "return": "", "example": ">>> # Caution, for this example to work a .pdf example file will be downloaded from automagica.com FTP\n>>> example_pdf = download_file_from_url('http://automagica.com/examples/example_document.pdf')\n>>> # Join the PDF file three times to create multi page\n>>> multi_page_pdf_example = join_pdf_files(example_pdf, example_pdf, example_pdf)\n>>> # Extract some pages from it\n>>> new_file = extract_page_range_from_pdf(multi_page_pdf_example, 1, 2 )\n>>> # Open resulting PDF file for illustration\n>>> open_file(new_file)\n", "snippet": "# Caution, for this example to work a .pdf example file will be downloaded from automagica.com FTP\nexample_pdf = download_file_from_url('http://automagica.com/examples/example_document.pdf')\n# Join the PDF file three times to create multi page\nmulti_page_pdf_example = join_pdf_files(example_pdf, example_pdf, example_pdf)\n# Extract some pages from it\nnew_file = extract_page_range_from_pdf(multi_page_pdf_example, 1, 2 )\n# Open resulting PDF file for illustration\nopen_file(new_file)\n", "keywords": ["PDF", "read", "extract text", "PDF file", "extract PDF", "join", "cut", "cut PDF", "extract pages", "extract from pdf", "select page", "page"], "icon": "las la-cut"}, {"function_call": "extract_images_from_pdf(file_path)", "name": "Extract images from PDF", "description": "Save a specific page from a PDF as an image", "parameters": [{"name": " file_path", "description": " Full path to store extracted images\n"}], "return": "", "example": ">>> # Caution, for this example to work a .pdf example file will be downloaded from automagica.com FTP\n>>> example_pdf = download_file_from_url('http://automagica.com/examples/example_document.pdf')\n>>> # Extract the images\n>>> extract_images_from_pdf(example_pdf)\n", "snippet": "# Caution, for this example to work a .pdf example file will be downloaded from automagica.com FTP\nexample_pdf = download_file_from_url('http://automagica.com/examples/example_document.pdf')\n# Extract the images\nextract_images_from_pdf(example_pdf)\n", "keywords": ["PDF", "extract images", "images", "extract text", "PDF file", "image"], "icon": "las la-icons"}, {"function_call": "apply_watermark_to_pdf(file_path, watermark_path, output_path=\"\")", "name": "Watermark a PDF", "description": "Watermark a PDF", "parameters": [{"name": " file_path", "description": " Filepath to the document that will be watermarked. Should be pdf file.\n"}, {"name": " watermark_path", "description": " Filepath to the watermark. Should be pdf file.\n"}, {"name": " output_path", "description": " Path to save watermarked PDF. If no path is provided same path as input will be used with 'watermarked' added to the name\n"}], "return": " Output path as a string\n", "example": ">>> # Caution, for this example to work a .pdf example file will be downloaded from automagica.com FTP\n>>> example_pdf = download_file_from_url('http://automagica.com/examples/example_document.pdf')\n>>> # Download the watermark\n>>> example_watermark = download_file_from_url('http://automagica.com/examples/approved_stamp.pdf')\n>>> # Apply the watermark\n>>> watermarked_file = apply_watermark_to_pdf(example_pdf, example_watermark)\n>>> # Open the file for illustration\n>>> open_file(watermarked_file)\n", "snippet": "# Caution, for this example to work a .pdf example file will be downloaded from automagica.com FTP\nexample_pdf = download_file_from_url('http://automagica.com/examples/example_document.pdf')\n# Download the watermark\nexample_watermark = download_file_from_url('http://automagica.com/examples/approved_stamp.pdf')\n# Apply the watermark\nwatermarked_file = apply_watermark_to_pdf(example_pdf, example_watermark)\n# Open the file for illustration\nopen_file(watermarked_file)\n", "keywords": ["PDF", "extract images", "images", "extract text", "PDF file", "image"], "icon": "las la-stamp"}]}, {"name": "System Monitoring", "icon": "las la-wave-square", "activities": [{"function_call": "get_cpu_load(measure_time=1)", "name": "CPU load", "description": "Get average CPU load for all cores.", "parameters": [{"name": " measure_time", "description": " Time (seconds) to measure load. Standard measure_time is 1 second.\n"}], "return": " Displayed load is an average over measured_time.\n", "example": ">>> get_cpu_load()\n10.1\n", "snippet": "get_cpu_load()\n", "keywords": ["cpu", "load", "cpuload"], "icon": "las la-microchip"}, {"function_call": "get_number_of_cpu(logical=True)", "name": "Count CPU", "description": "Get the number of CPU's in the current system.", "parameters": [{"name": " logical", "description": " Determines if only logical units are added to the count, default value is True.\n"}], "return": " Number of CPU Integer\n", "example": ">>> get_number_of_cpu()\n2\n", "snippet": "get_number_of_cpu()\n", "keywords": ["cpu", "count", "number of cpu"], "icon": "las la-calculator"}, {"function_call": "get_cpu_frequency()", "name": "CPU frequency", "description": "Get frequency at which CPU currently operates.", "parameters": [], "return": " minimum and maximum frequency\n", "example": ">>> get_cpu_frequency()\nscpufreq(current=3600.0, min=0.0, max=3600.0)\n", "snippet": "get_cpu_frequency()\n", "keywords": ["cpu", "load", "cpu frequency"], "icon": "las la-wave-square"}, {"function_call": "get_cpu_stats()", "name": "CPU Stats", "description": "Get CPU statistics", "parameters": [], "return": " Number of CTX switches, intterupts, soft-interrupts and systemcalls.\n", "example": ">>> get_cpu_stats()\nscpustats(ctx_switches=735743826, interrupts=1540483897, soft_interrupts=0, syscalls=2060595131)\n", "snippet": "get_cpu_stats()\n", "keywords": ["cpu", "load", "cpu frequency", "stats", "cpu statistics"], "icon": "las la-server"}, {"function_call": "get_memory_stats(mem_type=\"swap\")", "name": "Memory statistics", "description": "Get  memory statistics", "parameters": [{"name": " mem_type", "description": " Choose mem_type = 'virtual' for virtual memory, and mem_type = 'swap' for swap memory (standard).\n"}], "return": " Total, used, free and percentage in use.\n", "example": ">>> get_memory_stats()\nsswap(total=24640016384, used=18120818688, free=6519197696, percent=73.5, sin=0, sout=0)\n", "snippet": "get_memory_stats()\n", "keywords": ["memory", "statistics", "usage", "ram"], "icon": "las la-memory"}, {"function_call": "get_disk_stats()", "name": "Disk stats", "description": "Get disk statistics of main disk", "parameters": [], "return": " Total, used, free and percentage in use.\n", "example": ">>> get_disk_stats()\nsdiskusage(total=999559262208, used=748696350720, free=250862911488, percent=74.9)\n", "snippet": "get_disk_stats()\n", "keywords": ["disk usage", "disk stats", "disk", "harddisk", "space"], "icon": "las la-save"}, {"function_call": "get_disk_partitions()", "name": "Partition info", "description": "Get disk partition info", "parameters": [], "return": " tuple with info for every partition.\n", "example": ">>> get_disk_paritions()\n[sdiskpart(device='C:\\\\', mountpoint='C:\\\\', fstype='NTFS', opts='rw,fixed')]\n", "snippet": "get_disk_paritions()\n", "keywords": ["disk usage", "disk stats", "disk", "harddisk", "space"], "icon": "las la-save"}, {"function_call": "get_boot_time()", "name": "Boot time", "description": "Get most recent boot time", "parameters": [], "return": " time PC was booted in seconds after the epoch.\n", "example": ">>> get_boot_time()\n123456789.0\n", "snippet": "get_boot_time()\n", "keywords": ["boot", "boot time", "boottime", "startup", "timer"], "icon": "lar la-clock"}, {"function_call": "get_time_since_last_boot()", "name": "Uptime", "description": "Get uptime since last boot", "parameters": [], "return": " time since last boot in seconds.\n", "example": ">>> get_time_since_last_boot()\n1337.0\n", "snippet": "get_time_since_last_boot()\n", "keywords": ["boot", "boot time", "boottime", "startup", "timer"], "icon": "lar la-clock"}]}, {"name": "Image Processing", "icon": "las la-photo-video", "activities": [{"function_call": "show_image(file_path)", "name": "Show image", "description": "Displays an image specified by the path variable on the default imaging program.", "parameters": [{"name": " file_path", "description": " Path to image\n"}], "return": "", "example": ">>> # Take screenshot of current screen to use as test image\n>>> testimage = take_screenshot()\n>>> # Show the image\n>>> show_image(testimage)\n", "snippet": "# Take screenshot of current screen to use as test image\ntestimage = take_screenshot()\n# Show the image\nshow_image(testimage)\n", "keywords": ["image", "show image", "reveal", "open image", "open"], "icon": "las la-images"}, {"function_call": "rotate_image(file_path, angle=90)", "name": "Rotate image", "description": "Rotate an image", "parameters": [{"name": " file_path", "description": " Path to image\n"}, {"name": " angle", "description": " Degrees to rotate image. Note that angles other than 90, 180, 270, 360 can resize the picture. \n"}], "return": "", "example": ">>> # Take screenshot of current screen to use as test image\n>>> testimage = take_screenshot()\n>>> # Rotate the image\n>>> rotate_image(testimage)\n>>> # Show the image\n>>> show_image(testimage)\n", "snippet": "# Take screenshot of current screen to use as test image\ntestimage = take_screenshot()\n# Rotate the image\nrotate_image(testimage)\n# Show the image\nshow_image(testimage)\n", "keywords": ["image", "rotate image", "90 degrees", "image manipulation", "photoshop", "paint"], "icon": "las la-undo"}, {"function_call": "resize_image(file_path, size)", "name": "Resize image", "description": "Resizes the image specified by the path variable.", "parameters": [{"name": " file_path", "description": " Path to the image\n"}, {"name": " size", "description": " Tuple with the width and height in pixels. E.g.  (300, 400) gives the image a width of 300 pixels and a height of 400 pixels.\n"}], "return": "", "example": ">>> # Take screenshot of current screen to use as test image\n>>> testimage = take_screenshot()\n>>> # Resize the image\n>>> resize_image(testimage, size=(100,100))\n>>> # Show the image\n>>> show_image(testimage)\n", "snippet": "# Take screenshot of current screen to use as test image\ntestimage = take_screenshot()\n# Resize the image\nresize_image(testimage, size=(100,100))\n# Show the image\nshow_image(testimage)\n", "keywords": ["image", "resize image", "resize", "size", "image manipulation", "photoshop", "paint"], "icon": "las la-expand-arrows-alt"}, {"function_call": "get_image_width(file_path)", "name": "Get image width", "description": "Get with of image", "parameters": [{"name": " file_path", "description": " Path to image\n"}], "return": "", "example": ">>> # Take screenshot of current screen to use as test image\n>>> testimage = take_screenshot()\n>>> # get image height\n>>> get_image_width(testimage)\n1000\n", "snippet": "# Take screenshot of current screen to use as test image\ntestimage = take_screenshot()\n# get image height\nget_image_width(testimage)\n", "keywords": ["image", "height", "width", "image height", "image width"], "icon": "las la-expand-arrows-alt"}, {"function_call": "get_image_height(file_path)", "name": "Get image height", "description": "Get height of image", "parameters": [{"name": " file_path", "description": " Path to image\n"}], "return": " Height of image\n", "example": ">>> # Take screenshot of current screen to use as test image\n>>> testimage = take_screenshot()\n>>> # get image height\n>>> get_image_height(testimage)\n1000\n", "snippet": "# Take screenshot of current screen to use as test image\ntestimage = take_screenshot()\n# get image height\nget_image_height(testimage)\n", "keywords": ["image", "height", "width", "image height", "image width"], "icon": "las la-arrows-alt-v"}, {"function_call": "crop_image(file_path, box=None)", "name": "Crop image", "description": "Crops the image specified by path to a region determined by the box variable.", "parameters": [{"name": " file_path", "description": " Path to image\n"}, {"name": " box", "description": "  A tuple that defines the left, upper, right and lower pixel co\u00f6rdinate e.g.: (left, upper, right, lower)\n"}], "return": "", "example": ">>> # Take screenshot of current screen to use as test image\n>>> testimage = take_screenshot()\n>>> # Crop the image\n>>> crop_image(testimage, box = (10,10,100,100))\n>>> # Show the image\n>>> show_image(testimage)\n", "snippet": "# Take screenshot of current screen to use as test image\ntestimage = take_screenshot()\n# Crop the image\ncrop_image(testimage, box = (10,10,100,100))\n# Show the image\nshow_image(testimage)\n", "keywords": ["image", "crop", "crop image"], "icon": "las la-crop"}, {"function_call": "mirror_image_horizontally(file_path)", "name": "Mirror image horizontally", "description": "Mirrors an image with a given path horizontally from left to right.", "parameters": [{"name": " file_path", "description": " Path to image\n"}], "return": "", "example": ">>> # Take screenshot of current screen to use as test image\n>>> testimage = take_screenshot()\n>>> # Mirror image horizontally\n>>> mirror_image_horizontally(testimage)\n>>> # Show the image\n>>> show_image(testimage)\n", "snippet": "# Take screenshot of current screen to use as test image\ntestimage = take_screenshot()\n# Mirror image horizontally\nmirror_image_horizontally(testimage)\n# Show the image\nshow_image(testimage)\n", "keywords": ["image", "flip", "flip image", "mirror", "mirror image", "horizon", "horizontally"], "icon": "las la-caret-up"}, {"function_call": "mirror_image_vertically(file_path)", "name": "Mirror image vertically", "description": "Mirrors an image with a given path vertically from top to bottom.", "parameters": [{"name": " file_path", "description": " Path to image\n"}], "return": "", "example": ">>> # Take screenshot of current screen to use as test image\n>>> testimage = take_screenshot()\n>>> # Mirror image vertically\n>>> mirror_image_vertically(testimage)\n>>> # Show the image\n>>> show_image(testimage)\n", "snippet": "# Take screenshot of current screen to use as test image\ntestimage = take_screenshot()\n# Mirror image vertically\nmirror_image_vertically(testimage)\n# Show the image\nshow_image(testimage)\n", "keywords": ["image", "flip", "flip image", "mirror", "mirror image", "vertical", "vertically"], "icon": "las la-caret-right"}]}, {"name": "Process", "icon": "las la-play", "activities": [{"function_call": "run_manual(task)", "name": "Windows run", "description": "Use Windows Run to boot a processNote this uses keyboard inputs which means this process can be disrupted by interfering inputs", "parameters": [{"name": " task", "description": " Name of the task to run e.g. 'mspaint.exe'\n"}], "return": "", "example": ">>> # Open paint with Windows run\n>>> run_manual('mspaint.exe')\n>>> # Open home directory with Windows run\n>>> run_manual(home_path())\n", "snippet": "# Open paint with Windows run\nrun_manual('mspaint.exe')\n# Open home directory with Windows run\nrun_manual(home_path())\n", "keywords": ["run", "open", "task", "win r", "windows run", "shell", "cmd"], "icon": "las la-cog"}, {"function_call": "run(process)", "name": "Run process", "description": "Use subprocess to open a windows process", "parameters": [{"name": " process", "description": " Process to open e.g: 'calc.exe', 'notepad.exe', 'control.exe', 'mspaint.exe'.\n"}], "return": "", "example": ">>> # Open paint with Windows run\n>>> run('mspaint.exe')\n", "snippet": "# Open paint with Windows run\nrun('mspaint.exe')\n", "keywords": ["run", "open", "task", "win r", "windows run", "shell", "cmd"], "icon": "las la-play"}, {"function_call": "is_process_running(name)", "name": "Check if process is running", "description": "Check if process is running. Validates if given process name (name) is currently running on the system.", "parameters": [{"name": " name", "description": " Name of process\n"}], "return": " Boolean\n", "example": ">>> # Open paint with Windows run\n>>> run('mspaint.exe')\n>>> # Check if paint is running\n>>> is_process_running('mspaint.exe')\nTrue\n", "snippet": "# Open paint with Windows run\nrun('mspaint.exe')\n# Check if paint is running\nis_process_running('mspaint.exe')\n", "keywords": ["run", "open", "task", "win r", "windows run", "shell", "cmd"], "icon": "las la-cogs"}, {"function_call": "get_running_processes()", "name": "Get running processes", "description": "Get names of unique processes currently running on the system.", "parameters": [], "return": " List of unique running processes\n", "example": ">>> # Show all running processes\n>>> get_running_processes()\n['cmd.exe', 'chrome.exe', ... ]\n", "snippet": "# Show all running processes\nget_running_processes()\n", "keywords": ["process", "processes", "list processes", "running", "running processes"], "icon": "las la-list"}, {"function_call": "kill_process(name=None)", "name": "Kill process", "description": "Kills a process forcefully", "parameters": [{"name": " name", "description": " Name of the process\n"}], "return": "", "example": ">>> # Open paint with Windows run\n>>> run('mspaint.exe')\n>>> # Force paint to close\n>>> kill_process('mspaint.exe')\n", "snippet": "# Open paint with Windows run\nrun('mspaint.exe')\n# Force paint to close\nkill_process('mspaint.exe')\n", "keywords": ["run", "open", "task", "win r", "windows run", "shell", "cmd", "kill", "stop", "kill process", "stop process", "quit", "exit"], "icon": "las la-window-close"}]}, {"name": "Optical Character Recognition (OCR)", "icon": "las la-glasses", "activities": [{"function_call": "extract_text_ocr(file_path=None)", "name": "Get text with OCR", "description": "This activity extracts all text from the current screen or an image if a path is specified.", "parameters": [{"name": " file_path", "description": " Path to image from where text will be extracted. If no path is specified a screenshot of current screen will be used.\n"}], "return": " String with all text from current screen\n", "example": ">>> # Make a text file with some text to recognize\n>>> testfile = make_text_file(text='OCR Example')\n>>> # Open the text file\n>>> open_file(testfile)\n>>> # Find the text with OCR\n>>> extracted_text = find_text_on_screen_ocr(text='OCR Example')\n>>> # Check if the extracted_text contains the original word\n>>> 'OCR Example' in extracted_text\nTrue\n", "snippet": "# Make a text file with some text to recognize\ntestfile = make_text_file(text='OCR Example')\n# Open the text file\nopen_file(testfile)\n# Find the text with OCR\nextracted_text = find_text_on_screen_ocr(text='OCR Example')\n# Check if the extracted_text contains the original word\n'OCR Example' in extracted_text\n", "keywords": ["OCR", "vision", "AI", "screen", "citrix", "read", "optical character recognition"], "icon": "lab la-readme"}, {"function_call": "find_text_on_screen_ocr(text, criteria=None)", "name": "Find text on screen with OCR", "description": "This activity finds position (coordinates) of specified text on the current screen using OCR.", "parameters": [{"name": " text", "description": " Text to find. Only exact matches are returned.\n"}, {"name": " criteria", "description": " Criteria to select on if multiple matches are found. If no criteria is specified all matches will be returned. Options are 'first', which returns the first match closest to the upper left corner, 'last' returns the last match closest to the lower right corner, random selects a random match.\n"}], "return": " Dictionary or list of dictionaries with matches with following elements: 'h' height in pixels, 'text' the matched text,'w' the width in pixels, 'x' absolute x-co\u00f6rdinate , 'y' absolute y-co\u00f6rdinate. Returns nothing if no matches are found\n", "example": ">>> # Make a text file with some text to recognize\n>>> testfile = make_text_file(text='OCR Example')\n>>> # Open the text file\n>>> open_file(testfile)\n>>> # Find the text with OCR\n>>> find_text_on_screen_ocr(text='OCR Example')\n", "snippet": "# Make a text file with some text to recognize\ntestfile = make_text_file(text='OCR Example')\n# Open the text file\nopen_file(testfile)\n# Find the text with OCR\nfind_text_on_screen_ocr(text='OCR Example')\n", "keywords": ["OCR", "vision", "AI", "screen", "citrix", "read", "optical character recognition"], "icon": "las la-glasses"}, {"function_call": "click_on_text_ocr(text, delay=1)", "name": "Click on text with OCR", "description": "This activity clicks on position (coordinates) of specified text on the current screen using OCR.", "parameters": [{"name": " text", "description": " Text to find. Only exact matches are returned.\n"}, {"name": " delay", "description": " Delay before clicking in seconds\n"}], "return": "", "example": ">>> # Make a text file with some text to recognize\n>>> testfile = make_text_file(text='OCR Example')\n>>> # Open the text file\n>>> open_file(testfile)\n>>> # Find the text with OCR and click on it\n>>> click_on_text_ocr(text='OCR Example')\n", "snippet": "# Make a text file with some text to recognize\ntestfile = make_text_file(text='OCR Example')\n# Open the text file\nopen_file(testfile)\n# Find the text with OCR and click on it\nclick_on_text_ocr(text='OCR Example')\n", "keywords": ["OCR", "vision", "AI", "screen", "citrix", "read", "optical character recognition", "click"], "icon": "las la-mouse-pointer"}, {"function_call": "double_click_on_text_ocr(text, delay=1)", "name": "Double click on text with OCR", "description": "This activity double clicks on position (coordinates) of specified text on the current screen using OCR.", "parameters": [{"name": " text", "description": " Text to find. Only exact matches are returned.\n"}, {"name": " delay", "description": " Delay before clicking in seconds\n"}], "return": "", "example": ">>> # Make a text_file with some text to recognize\n>>> testfile = make_text_file(text='OCR Example')\n>>> # Open the text file\n>>> open_file(testfile)\n>>> # Find the text with OCR and double click on it\n>>> double_click_on_text_ocr(text='OCR Example')\n", "snippet": "# Make a text_file with some text to recognize\ntestfile = make_text_file(text='OCR Example')\n# Open the text file\nopen_file(testfile)\n# Find the text with OCR and double click on it\ndouble_click_on_text_ocr(text='OCR Example')\n", "keywords": ["OCR", "vision", "AI", "screen", "citrix", "read", "optical character recognition", "click", "double click"], "icon": "las la-mouse-pointer"}, {"function_call": "right_click_on_text_ocr(text, delay=1)", "name": "Right click on text with OCR", "description": "This activity Right clicks on position (coordinates) of specified text on the current screen using OCR.", "parameters": [{"name": " text", "description": " Text to find. Only exact matches are returned.\n"}, {"name": " delay", "description": " Delay before clicking in seconds\n"}], "return": "", "example": ">>> # Make a text file with some text to recognize\n>>> testfile = make_text_file(text='OCR Example')\n>>> # Open the text file\n>>> open_file(testfile)\n>>> # Find the text with OCR and right click on it\n>>> right_click_on_text_ocr(text='OCR Example')\n", "snippet": "# Make a text file with some text to recognize\ntestfile = make_text_file(text='OCR Example')\n# Open the text file\nopen_file(testfile)\n# Find the text with OCR and right click on it\nright_click_on_text_ocr(text='OCR Example')\n", "keywords": ["OCR", "vision", "AI", "screen", "citrix", "read", "optical character recognition", "click", "right click"], "icon": "las la-mouse-pointer"}]}, {"name": "UiPath", "icon": "las la-robot", "activities": [{"function_call": "execute_uipath_process(project_file_path, arguments=None, uirobot_exe_path=None)", "name": "Execute a UiPath process", "description": "This activity allows you to execute a process designed with the UiPath Studio. All console output from the Write Line activity (https://docs.uipath.com/activities/docs/write-line) will be printed as output.", "parameters": [{"name": " project_file_path", "description": " path to the project file (as created within the UiPath Studio)\n"}, {"name": " arguments", "description": " dictionary with input arguments/parameters for the process to use in UiPath (optional)\n"}, {"name": " uirobot_exe_path", "description": " path to UiPath's UiRobot.exe (optional)\n"}], "return": "", "example": ">>> # Run a UiPath process\n>>> arguments = {'firstname': 'John', 'lastname': 'Doe'}\n>>> execute_uipath_process(r\"C:\\\\Processes UiPath\\\\my_process.xaml\", arguments=arguments)\nCompleted UiPath process \"C:\\\\Processes UiPath\\\\my_process.xaml\"\n", "snippet": "# Run a UiPath process\narguments = {'firstname': 'John', 'lastname': 'Doe'}\nexecute_uipath_process(r\"C:\\\\Processes UiPath\\\\my_process.xaml\", arguments=arguments)\n", "keywords": ["RPA", "UiPath", "Studio", "robot", "orchestrator", "xaml", "ui path"], "icon": "las la-robot"}]}, {"name": "AutoIt", "icon": "las la-robot", "activities": [{"function_call": "run_autoit_script(script_path, arguments=None, autoit_exe_path=None)", "name": "Execute a AutoIt script", "description": "This activity allows you to run an AutoIt script. If you use the ConsoleWrite function (https://www.autoitscript.com/autoit3/docs/functions/ConsoleWrite.htm), the output will be presented to you.", "parameters": [{"name": " script_path", "description": " path to the '.au3' script file\n"}, {"name": " arguments", "description": " string with input arguments/parameters for the script (optional)\n"}, {"name": " autoit_exe_path", "description": " path to AutoIt.exe (optional)\n"}], "return": "", "example": ">>> # Run an AutoIt script\n>>> arguments = 'John'\n>>> run_autoit_script(r\"C:\\\\AutoIt\\\\Scripts\\\\MyScript.au3\", arguments=arguments) # Point this to your AutoIt Script\nCompleted AutoIt script \"C:\\\\AutoIt\\\\Scripts\\\\MyScript.au3\"\n", "snippet": "# Run an AutoIt script\narguments = 'John'\nrun_autoit_script(r\"C:\\\\AutoIt\\\\Scripts\\\\MyScript.au3\", arguments=arguments) # Point this to your AutoIt Script\n", "keywords": ["RPA", "AutoIt", "au3", "au"], "icon": "las la-robot"}]}, {"name": "Alternative frameworks", "icon": "las la-robot", "activities": [{"function_call": "execute_robotframework_test(test_case_path, variables=None)", "name": "Execute a Robot Framework test case", "description": "This activity allows you to run a Robot Framework test case. Console output of the test case will be printed.", "parameters": [{"name": " test_case_path", "description": " path to the '.robot' test case file\n"}, {"name": " variables", "description": " dictionary with variable declarations\n"}], "return": "", "example": ">>> # Run an Robot Framework test case\n>>> variables = {'FIRSTNAME': 'John', 'LASTNAME': 'Doe'}\n>>> execute_robotframework_test(r\"C:\\\\Test Cases\\\\my_test_case.robot\", variables=variables) # Point this to your Robot Framework test case\nCompleted Robot Framework test case \"C:\\\\Test Cases\\\\my_test_case.robot\"\n", "snippet": "# Run an Robot Framework test case\nvariables = {'FIRSTNAME': 'John', 'LASTNAME': 'Doe'}\nexecute_robotframework_test(r\"C:\\\\Test Cases\\\\my_test_case.robot\", variables=variables) # Point this to your Robot Framework test case\n", "keywords": ["RPA", "robot framework", "robotframework", "robot"], "icon": "las la-robot"}, {"function_call": "run_blueprism_process(process_name,username=\"\",password=\"\",sso=False,inputs=None,automatec_exe_path=None)", "name": "Run a Blue Prism process", "description": "This activity allows you to run a Blue Prism process.", "parameters": [{"name": " process_name", "description": " name of the process in Blue Prism\n"}, {"name": " username", "description": " Blue Prism username\n"}, {"name": " password", "description": " Blue Prism password\n"}, {"name": " sso", "description": " Run as single-sign on user with Blue Prism\n"}, {"name": " inputs", "description": " dictionary with inputs declarations (optional)\n"}, {"name": " automatec_exe_path", "description": " path to Blue Prism's AutomateC.exe (optional)\n"}], "return": "", "example": ">>> # Run a Blue Prism process\n>>> inputs = {'firstname': 'John', 'lastname': 'Doe'}\n>>> run_blueprism_process(\"My Example Process\", username=\"user\", password=\"password\", inputs=inputs)\nCompleted Blue Prism process \"My Example Process\"\n", "snippet": "# Run a Blue Prism process\ninputs = {'firstname': 'John', 'lastname': 'Doe'}\nrun_blueprism_process(\"My Example Process\", username=\"user\", password=\"password\", inputs=inputs)\n", "keywords": ["RPA", "blueprism", "blue prism", "robot"], "icon": "las la-robot"}, {"function_call": "run_automationanywhere_task(task_file_path, aaplayer_exe_path=None)", "name": "Run an Automation Anywhere task", "description": "This activity allows you to run an Automation Anywhere task.", "parameters": [{"name": " task_file_path", "description": " path to the task file of Automation Anywhere\n"}, {"name": " aaplayer_exe_path", "description": " path to the AAPlayer.exe (optional)\n"}], "return": "", "example": ">>> # Run an Automation Anywhere task\n>>> run_automationanywhere_task(r\"C:\\AutomationAnywhereTasks\\MyTask.atmx\")\nCompleted Automation Anywhere task \"C:\\AutomationAnywhereTasks\\MyTask.atmx\"\n", "snippet": "# Run an Automation Anywhere task\nrun_automationanywhere_task(r\"C:\\AutomationAnywhereTasks\\MyTask.atmx\")\n", "keywords": ["RPA", "automation anywhere", "aa", "robot"], "icon": "las la-robot"}]}, {"name": "General", "icon": "las la-briefcase", "activities": [{"function_call": "raise_exception(message=\"Exception\", exception=Exception)", "name": "Raise exception", "description": "Raises an exception", "parameters": [{"name": " message", "description": " Message\n"}, {"name": " exception", "description": " Exception to raise\n"}, {"name": " sap_logon_exe_path", "description": " Specifiy the installation location of the saplogon.exe if not at the default location.\n"}, {"name": " delay", "description": " Number of seconds to wait between tries for attaching to the SAP process\n"}], "return": "", "example": ">>> # Log in to SAP GUI\n>>> sap = SAPGUI()\n>>> sap.login('System', '001', 'username', 'password')\n", "snippet": "# Log in to SAP GUI\nsap = SAPGUI()\nsap.login('System', '001', 'username', 'password')\n", "keywords": ["sap", "sap gui", "sap client"], "icon": "las la-briefcase"}]}, {"name": "SAP GUI", "icon": "las la-briefcase", "activities": [{"function_call": "quit(self)", "name": "Quit SAP GUI", "description": "Quits the SAP GUI completely and forcibly.", "parameters": [], "return": "", "example": ">>> # Log in to SAP GUI\n>>> sap = SAPGUI()\n>>> sap.login('System', '001', 'username', 'password')\n>>> # Quit SAP\n>>> sap.quit()\n", "snippet": "# Log in to SAP GUI\nsap = SAPGUI()\nsap.login('System', '001', 'username', 'password')\n# Quit SAP\nsap.quit()\n", "keywords": ["sap", "sap gui", "sap client", "quit"], "icon": "las la-briefcase"}, {"function_call": "login(environment, client, username, password, force=True)", "name": "Log in to SAP GUI", "description": "Logs in to an SAP system on SAP GUI.", "parameters": [{"name": " environment", "description": " Environment\n"}, {"name": " client", "description": " Client\n"}, {"name": " username", "description": " Username\n"}, {"name": " password", "description": " Password\n"}, {"name": " force", "description": " Force optional\n"}], "return": "", "example": ">>> # Log in to SAP GUI\n>>> sap = SAPGUI()\n>>> sap.login('System', '001', 'username', 'password')\n", "snippet": "# Log in to SAP GUI\nsap = SAPGUI()\nsap.login('System', '001', 'username', 'password')\n", "keywords": ["sap", "sap gui", "sap client", "login"], "icon": "las la-briefcase"}, {"function_call": "click_sap(identifier)", "name": "Click on a SAP GUI element", "description": "Clicks on an identifier in the SAP GUI.", "parameters": [{"name": " identifier", "description": " Technical identifier of the element\n"}], "return": "", "example": ">>> # Log in to SAP GUI\n>>> sap = SAPGUI()\n>>> sap.login('System', '001', 'username', 'password')\n>>> logout_button = '/app/con[0]/ses[0]/wnd[0]/tbar[0]/btn[15]'\n>>> sap.highlight(logout_button)\n>>> sap.click_sap(logout_button)\n", "snippet": "# Log in to SAP GUI\nsap = SAPGUI()\nsap.login('System', '001', 'username', 'password')\nlogout_button = '/app/con[0]/ses[0]/wnd[0]/tbar[0]/btn[15]'\nsap.highlight(logout_button)\nsap.click_sap(logout_button)\n", "keywords": ["sap", "sap gui", "sap client", "click"], "icon": "las la-briefcase"}, {"function_call": "get_text(identifier)", "name": "Get text from a SAP GUI element", "description": "Retrieves the text from a SAP GUI element.", "parameters": [{"name": " identifier", "description": " Technical identifier of the element\n"}], "return": "", "example": ">>> # Log in to SAP GUI\n>>> sap = SAPGUI()\n>>> sap.login('System', '001', 'username', 'password')\n>>> status_bar = '/app/con[0]/ses[0]/wnd[0]/sbar/pane[0]'\n>>> sap.get_text(status_bar)\n", "snippet": "# Log in to SAP GUI\nsap = SAPGUI()\nsap.login('System', '001', 'username', 'password')\nstatus_bar = '/app/con[0]/ses[0]/wnd[0]/sbar/pane[0]'\nsap.get_text(status_bar)\n", "keywords": ["sap", "sap gui", "sap client", "get text"], "icon": "las la-briefcase"}, {"function_call": "set_text(identifier, text)", "name": "Set text of a SAP GUI element", "description": "Sets the text of a SAP GUI element.", "parameters": [{"name": " text", "description": " Text to set\n"}, {"name": " identifier", "description": " Technical identifier of the element\n"}], "return": "", "example": ">>> # Log in to SAP GUI\n>>> sap = SAPGUI()\n>>> sap.login('System', '001', 'username', 'password')\n>>> sap.set_text('/app/con[0]/ses[0]/wnd[0]/tbar[0]/okcd', 'Hello!')\n", "snippet": "# Log in to SAP GUI\nsap = SAPGUI()\nsap.login('System', '001', 'username', 'password')\nsap.set_text('/app/con[0]/ses[0]/wnd[0]/tbar[0]/okcd', 'Hello!')\n", "keywords": ["sap", "sap gui", "sap client", "set text"], "icon": "las la-briefcase"}, {"function_call": "highlight(identifier, duration=1)", "name": "Highlights a SAP GUI element", "description": "Temporarily highlights a SAP GUI element", "parameters": [{"name": " identifier", "description": " Technical identifier of the element\n"}, {"name": " duration", "description": " Duration of the highlight\n"}], "return": "", "example": ">>> # Log in to SAP GUI\n>>> sap = SAPGUI()\n>>> sap.login('System', '001', 'username', 'password')\n>>> sap.highlight('/app/con[0]/ses[0]/wnd[0]/tbar[0]/okcd', 'Hello!')\n", "snippet": "# Log in to SAP GUI\nsap = SAPGUI()\nsap.login('System', '001', 'username', 'password')\nsap.highlight('/app/con[0]/ses[0]/wnd[0]/tbar[0]/okcd', 'Hello!')\n", "keywords": ["sap", "sap gui", "sap client", "highlight"], "icon": "las la-briefcase"}]}, {"name": "Portal", "icon": "las la-robot", "activities": [{"function_call": "create_new_job_in_portal(process_name, process_version_id=None, priority=0, parameters=None)", "name": "Create a new job in the Automagica Portal", "description": "This activity creates a new job in the Automagica Portal for a given process. The bot performing this activity needs to be in the same team as the process it creates a job for.", "parameters": [{"name": " process_name", "description": " name of the process\n"}, {"name": " process_version_id", "description": " id of a specific version of the process, if not provided it will use the latest version (optional)\n"}, {"name": " priority", "description": " priority level of the process. higher priority levels are performed first. (optional)\n"}, {"name": " parameters", "description": " parameters for the process (optional)\n"}], "return": "", "example": ">>> # Create a job in the Automagica Portal\n>>> create_new_job_in_portal('My process')\nJob 1234567890 created\n", "snippet": "# Create a job in the Automagica Portal\ncreate_new_job_in_portal('My process')\n", "keywords": ["queueing", "process", "job", "create job", "new job"], "icon": "las la-robot"}, {"function_call": "get_credential_from_portal(credential_name)", "name": "Get a credential from the Automagica Portal", "description": "This activity retrieves a credential from the Automagica Portal.", "parameters": [{"name": " credential_name", "description": " name of the credential\n"}], "return": " Credential\n", "example": ">>> # Get a credential from the Portal\n>>> print(get_credential_from_portal('My credential'))\n'secretpassword'\n", "snippet": "# Get a credential from the Portal\nprint(get_credential_from_portal('My credential'))\n", "keywords": ["password", "credential", "portal", "login", "username"], "icon": "las la-key"}]}, {"name": "Vision", "icon": "las la-eye", "activities": [{"function_call": "is_visible(automagica_id, delay=1, timeout=30)", "name": "Check if element is visible on screen", "description": "This activity can be used to check if a certain element is visible on the screen.Note that this uses Automagica Portal and uses some advanced an fuzzy matching algorithms for finding identical elements.", "parameters": [{"name": " automagica_id", "description": " Element ID provided by the recorder\n"}, {"name": " delay", "description": " Delay before checking visibility in seconds\n"}, {"name": " timeout", "description": " Time before timeout (maximum time to wait) in seconds\n"}], "return": " True if visble, False if not\n", "example": ">>> # Use the recorder to find an element ID\n>>> # Run the Windows calculator and try to perform the activity\n>>> run('calc.exe')\n>>> # Use the element ID found by the recorder, in this case ID 'qf41'. You can also view this on automagica.id/qf41 \n>>> #  If you have a vastly different version or layout the element might not be found, use the recorder \n>>> is_visible('qf41')\n", "snippet": "# Use the recorder to find an element ID\n# Run the Windows calculator and try to perform the activity\nrun('calc.exe')\n# Use the element ID found by the recorder, in this case ID 'qf41'. You can also view this on automagica.id/qf41 \n#  If you have a vastly different version or layout the element might not be found, use the recorder \nis_visible('qf41')\n", "keywords": ["click", "visible", "is visible", "appear", " computer vision", "vision", "AI"], "icon": "las la-eye"}, {"function_call": "wait_appear(automagica_id, delay=1, timeout=30)", "name": "Wait for an element to appear", "description": "Wait for an element that is defined the recorder", "parameters": [{"name": " automagica_id", "description": " The element ID provided by the recorder\n"}, {"name": " delay", "description": " Delay before waiting to appear in seconds\n"}, {"name": " timeout", "description": " Maximum time to wait for an element in seconds\n"}], "return": " Blocks while element not visible\n", "example": ">>> # Use the recorder to find the element ID to wait for\n>>> # Run the Windows calculator and try to perform the activity\n>>> run('calc.exe')\n>>> # Use the element ID found by the recorder, in this case ID 'qf41'. You can also view this on automagica.id/qf41 \n>>> #  If you have a vastly different version or layout the element might not be found, use the recorder \n>>> wait_appear('qf41')\n", "snippet": "# Use the recorder to find the element ID to wait for\n# Run the Windows calculator and try to perform the activity\nrun('calc.exe')\n# Use the element ID found by the recorder, in this case ID 'qf41'. You can also view this on automagica.id/qf41 \n#  If you have a vastly different version or layout the element might not be found, use the recorder \nwait_appear('qf41')\n", "keywords": ["click", "computer vision", "vision", "AI"], "icon": "las la-eye"}, {"function_call": "wait_vanish(automagica_id, delay=1, timeout=30)", "name": "Wait Vanish", "description": "This activity allows the bot to wait for an element to vanish.", "parameters": [{"name": " automagica_id", "description": " The element ID provided by the recorder\n"}, {"name": " delay", "description": " Delay before waiting for vanish in seconds\n"}, {"name": " timeout", "description": " Maximum time to wait for an element in seconds\n"}], "return": "", "example": ">>> # Use the recorder to find the element ID for the vanishing element\n>>> # Run the Windows calculator and try to perform the activity\n>>> run('calc.exe')\n>>> # Use the element ID found by the recorder, in this case ID 'qf41'. You can also view this on automagica.id/qf41 \n>>> #  If you have a vastly different version or layout the element might not be found, use the recorder \n>>> wait_vanish('qf41')\n", "snippet": "# Use the recorder to find the element ID for the vanishing element\n# Run the Windows calculator and try to perform the activity\nrun('calc.exe')\n# Use the element ID found by the recorder, in this case ID 'qf41'. You can also view this on automagica.id/qf41 \n#  If you have a vastly different version or layout the element might not be found, use the recorder \nwait_vanish('qf41')\n", "keywords": ["wait", "disappear", "computer vision", "vision", "AI"], "icon": "las la-eye"}, {"function_call": "read_text(automagica_id, delay=1)", "name": "Read Text with Automagica Wand", "description": "This activity allows the bot to detect and read the text of an element by using the Automagica Portal API with a provided sample ID.", "parameters": [{"name": " automagica_id", "description": " the sample ID provided by Automagica Wand\n"}, {"name": " delay", "description": " Delay before reading text for vanish in seconds\n"}], "return": " Text\n", "example": ">>> # Record an element to read with the recorder\n>>> # Run the Windows calculator and try to perform the activity\n>>> run('calc.exe')\n>>> # Use the element ID found by the recorder, in this case ID 'qf41'. You can also view this on automagica.id/qf41 \n>>> #  If you have a vastly different version or layout the element might not be found, use the recorder \n>>> read_text('qf41')\n", "snippet": "# Record an element to read with the recorder\n# Run the Windows calculator and try to perform the activity\nrun('calc.exe')\n# Use the element ID found by the recorder, in this case ID 'qf41'. You can also view this on automagica.id/qf41 \n#  If you have a vastly different version or layout the element might not be found, use the recorder \nread_text('qf41')\n", "keywords": ["click", "computer vision", "vision", "AI"], "icon": "las la-eye"}]}]